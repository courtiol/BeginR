%\VignetteIndexEntry{Data day}
%\VignetteEngine{R.rsp::tex}

\documentclass[xcolor=dvipsnames, aspectratio=1610, 9pt]{beamer}
\usepackage[utf8]{inputenc}
\usepackage[UKenglish]{babel}
\usepackage{ragged2e}%pour justifier le text, apr√®s il suffit de tapper \justifying avant le paragraphe
\setbeamertemplate{navigation symbols}{}%no nav symbols
\usetheme[secheader]{Madrid}%

\title{Using data in R}
\author[Alexandre Courtiol]{Alexandre Courtiol}
\institute[IZW]{Leibniz Institute of Zoo and Wildlife Research}%
\date[June 2018]{\small June 2018}%

\begin{document}
\setlength{\topsep}{1pt}%space between input and output
<<echo = FALSE, message = FALSE>>=
options(width = 60)
library(knitr)
opts_chunk$set("size" = "scriptsize")
library(dplyr)
@
% first slide of the doc
\maketitle

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Table of contents}
\tableofcontents
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Vector}
\begin{frame}{Table of contents}
\tableofcontents[currentsection]
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Vector}
\begin{center}
A vector is a sequence of data elements of the same basic type
\vfill
\end{center}
  \begin{itemize}
  \item Vectors allow the organisation of entities (e.g. numbers, characters. . . ) along one dimension which can be indexed

  <<defining heights, echo = T>>=
height.girls <- c(178, 175, 159, 164, 183, 192)
height.boys <- c(181, 189, 174, 177)
@

  <<printing indexes height, echo = T>>=
height.girls[2]

height.boys[3]

@

  \end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Vector}
  \begin{itemize}
  \item They can be combined:

  << combining heights, echo = T>>=
(height <- c(height.boys, height.girls))
@

  \end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Vector continued}
  \begin{itemize}
  \item They can be indexed logically (i.e. indexed by anything leading to a vector of booleans):

  <<filtering heights, echo = T>>=
(height > 168)
@

  <<boolean heights, echo = T>>=
height[height > 168]
height[!(height == min(height))]
height[height != min(height)]
@

  \end{itemize}
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Factors}
\begin{frame}[fragile]{Factors}
  \begin{itemize}
  \item They work with other things than numbers:

  << factors sex, echo = T>>=
sex <- c("girl","girl","girl","girl","girl", "girl",
"boy","boy","boy","boy")
sex <- factor(sex)
sex
@

  <<factors sex other options,echo = T>>=
# Or
sex <- factor(c(rep("girl", times = 6),
                rep("boy", times = 4)))
# Or

sex <- factor(c(rep("girl", times = length(height.girls)),
                rep("boy", times = length(height.boys))))
@

  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Changing the order of levels of a factor}
  << changing levels order, echo = FALSE>>=
  my_factor1 <- factor(c("A", "A", "B", "B", "C"))
  my_factor2 <- factor(c("A", "A", "B", "B", "C"), levels = c("C", "B", "A"))
  @

  \begin{columns} % create columns
    \column{0.2\linewidth}
    \begin{center}
    You have:
    <<displaying factor1>>=
    my_factor1
    @
    \end{center}

    \column{0.2\linewidth}
    \begin{center}
    You want:
    <<displaying factor2>>=
    my_factor2
    @
    \end{center}
  \end{columns}

\pause

  \begin{columns}
    \column{0.5\linewidth}

    \begin{center}
    You do:
    <<solutions factors order>>=
    ## Using base:
    my_factor2 <- factor(my_factor1, levels(my_factor1)[c(3, 2, 1)])
    my_factor2
    @
    \end{center}
  \end{columns}
  \vfill

\pause

  Note:
  the order of levels influences the output of linear models and plotting functions (e.g. order in the legend of a ggplot) \dots
\end{frame}


\begin{frame}[fragile]{Changing the levels of a factor}
<<changing levels, echo = FALSE>>=
my_factor1 <- factor(c("A", "A", "B", "B", "C"))
my_factor2 <- factor(c("A", "A", "A", "A", "D"))
@

\begin{columns}
\column{0.2\linewidth}
\begin{center}
You have:
<<changing levels 1 >>=
my_factor1
@
\end{center}

\column{0.2\linewidth}
\begin{center}
You want:
<<changing levels 2>>=
my_factor2
@
\end{center}
\end{columns}

\begin{columns}
\column{0.5\linewidth}

\begin{center}
You do:
<<changing levels solution>>=
## Using base:
levels(my_factor1)
my_factor2 <- my_factor1
levels(my_factor2) <- c("A", "A", "D") ## in same order!
my_factor2
@

<<changing levels solutions dplyr>>=
## Using dplyr:
my_factor2 <- recode(my_factor1, A = "A", B = "A", C = "D")
my_factor2
@
\end{center}
\end{columns}

\end{frame}
%begin section dataframe
\section{Data frame}

\begin{frame}{Data frame}

\end{frame}

% begin section list
\section{List}
\begin{frame}{List}
\end{frame}

\end{document}
