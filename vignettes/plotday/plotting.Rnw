%\VignetteIndexEntry{Plotting day}
%\VignetteEngine{R.rsp::tex}

\documentclass[xcolor=dvipsnames, aspectratio=1610, 9pt]{beamer}
\usepackage[utf8]{inputenc}
\usepackage[UKenglish]{babel}
\usepackage{verbatim}%for comment environment
\usepackage{pdfpages} %for importing specific pages from pdf
\usepackage{ragged2e}%pour justifier le text, apr√®s il suffit de tapper \justifying avant le paragraphe
\setbeamertemplate{navigation symbols}{}%no nav symbols
\usetheme[secheader]{Madrid}%

\def\R{{\Large \bf R}}
\def\S{{\Large \bf S}}
\def\r{{\bf R}}
\def\s{{\bf S}}

\title{Plotting in \r}
\author[Alexandre Courtiol \& Liam D. Bailey]{Alexandre Courtiol \& Liam D. Bailey}
\institute[IZW]{Leibniz Institute of Zoo and Wildlife Research}%
\date[June 2018]{\small June 2018}%

\begin{document}
\setlength{\topsep}{1pt}%space between input and output
<<knitr options, echo = FALSE, message = FALSE>>=
options(width = 60)
par(mar = c(3,1,0,0))
library(knitr)
library(ggplot2)
opts_chunk$set("size" = "scriptsize")
knit_hooks$set(moveup = function(before, options, envir) {
  if (before) par(mar = c(3,1,0,0))
})
@

\AtBeginSection[]{
     \begin{frame}
     \frametitle{Plotting in \r}
     \setcounter{tocdepth}{1}
     \tableofcontents[currentsection]
     \end{frame}
}

\AtBeginSubsection[]{
     \begin{frame}
     \frametitle{Plotting in \r}
     \setcounter{tocdepth}{2}
     \tableofcontents[currentsubsection]
     \end{frame}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\maketitle

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Why plot in \r?}
\begin{itemize}
\item Powerful (large range of plot types)
\item Fully customizable (make your own style)
\item Practical (integrate your plots and your code together)
\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Graphics systems in \r}
They are three main graphics systems in \r:
\begin{itemize}
\item base (\verb`graphics`)
\item \verb`lattice` (based on \verb`grid`)
\item \verb`ggplot2` (based on \verb`grid`)
\end{itemize}
\vfill
Note 1: some other systems are sometimes usefull too (e.g. \verb`rgl`, \verb`plotly`)

Note 2: we will focus on base and \verb`ggplot2` but \verb`lattice` is excellent too!

Note 3: \verb`ggplot2` is part of the tidyverse universe.
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{An example (using default settings)}
\begin{columns}
\column[t]{0.4\linewidth}
<<baseplot_eg, fig.width=7, fig.height=7>>=
plot(Petal.Length ~ Petal.Width, data = iris)
@
\column[t]{0.4\linewidth}
<<ggplot_eg, fig.width=3, fig.height=3>>=
library(ggplot2)
ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point()
@
\end{columns}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% START BASEPLOT SECTION %

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Plotting with baseplot}

%%%%%%%%%%%%%%%%%
%%%%% SCATTERPLOT
%%%%%%%%%%%%%%%%%

\subsection{Scatter plot}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Baseplot: Scatter plots}
In baseplot, you use slightly different functions for different plots.
<<scatter_base_1, fig.width=4, fig.height=4, out.width="7cm", out.height="7cm", fig.align='center'>>=
plot(Petal.Length ~ Petal.Width, data = iris)
@
\end{frame}

\begin{frame}[fragile]{Baseplot: Scatter plots}
You can choose what type of scatter plot to display with argument type.
\vspace{0cm}
<<scatter_base_2, fig.width=4, fig.height=4,include=F>>=
par(mgp = c(2.5, 1, 0))
plot(Petal.Length ~ Petal.Width, data = iris)
@
<<tidy=F, eval=F>>=
plot(Petal.Length ~ Petal.Width, data = iris)
@
\vspace{-1.25cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/scatter_base_2-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Baseplot: Scatter plots}
You can change point shapes (pch) and colour (col).
\vspace{0cm}
<<scatter_base_3, fig.width=4, fig.height=4,include=F>>=
par(mgp = c(2.5, 1, 0))
palette(c("red", "blue", "green"))
plot(Petal.Length ~ Petal.Width, data = iris, pch = 16, col = iris$Species)
@
<<tidy=F, eval=F>>=
palette(c("red", "blue", "green"))
plot(Petal.Length ~ Petal.Width, data = iris,
     pch = 16, col = iris$Species)
@
\vspace{-1.25cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/scatter_base_3-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Beware}
Be aware that for many elements they have both an outline colour (col) and background colour (bg).
\begin{columns}
\column[t]{0.48\linewidth}
<<scatter_base_4a, fig.width=4, fig.height=4,include=F>>=
par(mgp = c(2.5, 1, 0))
palette(c("red", "blue", "green"))
plot(Petal.Length ~ Petal.Width, data = iris, cex = 2, pch = 21, bg = iris$Species, col = "black", lwd = 2)
@
<<tidy=F, eval=F>>=
palette(c("red", "blue", "green"))
plot(Petal.Length ~ Petal.Width, data = iris, cex = 2,
     pch = 21, bg = iris$Species, col = "black", lwd = 2)
@
\vspace{-1cm}
\begin{center}
\includegraphics[width = 1\linewidth]{./figure/scatter_base_4a-1.pdf}
\end{center}
\column[t]{0.48\linewidth}
<<scatter_base_4b, fig.width=4, fig.height=4,include=F>>=
par(mgp = c(2.5, 1, 0))
palette(c("red", "blue", "green"))
plot(Petal.Length ~ Petal.Width, data = iris, cex = 2, pch = 21, col = iris$Species, bg = "black", lwd = 2)
@
<<tidy=F, eval=F>>=
palette(c("red", "blue", "green"))
plot(Petal.Length ~ Petal.Width, data = iris, cex = 2,
     pch = 21, col = iris$Species, bg = "black", lwd = 2)
@
\vspace{-1cm}
\begin{center}
\includegraphics[width = 1\linewidth]{./figure/scatter_base_4b-1.pdf}
\end{center}
\end{columns}
\end{frame}

\begin{frame}[fragile]{Baseplot: Scatter plots}
Add a legend to make colours understandable.
\vspace{0cm}
<<scatter_base_5, fig.width=4, fig.height=4,include=F>>=
par(mgp = c(2.5, 1, 0))
palette(c("red", "blue", "green"))
plot(Petal.Length ~ Petal.Width, data = iris, pch = 21, bg = iris$Species)
legend(x = 0.05, y = 7, c("setosa", "versicolor", "virginica"), pch = 21, pt.bg = c("red", "blue", "green"), bty = "n")
@
<<tidy=F, eval=F>>=
palette(c("red", "blue", "green"))
plot(Petal.Length ~ Petal.Width, data = iris, pch = 21, bg = iris$Species)
legend(x = 0.05, y = 7, c("setosa", "versicolor", "virginica"), pch = 21, pt.bg = c("red", "blue", "green"), bty = "n")
@
\vspace{-1.25cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/scatter_base_5-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Baseplot: Scatter plots}
You can add lines to the plot.
\vspace{0cm}
<<scatter_base_6, fig.width=4, fig.height=4,include=F>>=
par(mgp = c(2.5, 1, 0))
palette(c("red", "blue", "green"))
plot(Petal.Length ~ Petal.Width, data = iris, pch = 21, bg = iris$Species)
abline(v = 1.3, lty = 2, col = "red", lwd = 2)
abline(h = 4, lty = 3, col = "black", lwd = 2)
abline(a = 1.084, lty = 1, b = 2.23, lwd = 2)
@
<<tidy=F, eval=F>>=
plot(Petal.Length ~ Petal.Width, data = iris, pch = 21, bg = iris$Species)
abline(v = 1.3, lty = 2, col = "red", lwd = 2)
abline(h = 4, lty = 3, col = "black", lwd = 2)
abline(a = 1.084, lty = 1, b = 2.23, lwd = 2)
@
\vspace{-1.25cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/scatter_base_6-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{A side note on points and lines}
There are standard values for each point and line type.
These are \textbf{the same} for ggplot and baseplot.
\vspace{0.5cm}
\begin{columns}
\column[t]{0.4\linewidth}
\begin{center}
\includegraphics[width=\linewidth]{./figure/point_shapes.png}
\end{center}
\column[t]{0.4\linewidth}
\begin{center}
\includegraphics[width=\linewidth]{./figure/line_shapes.png}
\end{center}
\end{columns}
\end{frame}

\begin{frame}[fragile]{Baseplot: Scatter plots}
You can add text and arrows.
\vspace{0cm}
<<scatter_base_7, fig.width=4, fig.height=4,include=F>>=
par(mgp = c(2.5, 1, 0))
palette(c("red", "blue", "green"))
plot(Petal.Length ~ Petal.Width, data = iris, pch = 21, bg = iris$Species, ylim = c(0.8, 7.2))
max.value <- iris[iris$Petal.Length == max(iris$Petal.Length), ]
arrows(x0 = max.value$Petal.Width - 0.75, y0 = max.value$Petal.Length,
       x1 = max.value$Petal.Width, y1 = max.value$Petal.Length, lwd = 2)
text(x = max.value$Petal.Width - 0.9, y = max.value$Petal.Length, labels = "Max")
@
<<tidy=F, eval=F>>=
plot(Petal.Length ~ Petal.Width, data = iris, pch = 21, bg = iris$Species)
max.value <- iris[iris$Petal.Length == max(iris$Petal.Length), ]
arrows(x0 = max.value$Petal.Width - 0.75, y0 = max.value$Petal.Length,
       x1 = max.value$Petal.Width, y1 = max.value$Petal.Length, lwd = 2)
text(x = max.value$Petal.Width - 0.9, y = max.value$Petal.Length, labels = "Max")
@
\vspace{-1.25cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/scatter_base_7-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Baseplot: Scatter plots}
Including error around lines requires you to build a polygon
\vspace{0cm}
<<scatter_base_8, fig.width=4, fig.height=4,include=F>>=
par(mgp = c(2.5, 1, 0))
test_mod <- lm(Petal.Length ~ Petal.Width, data = iris)
newdat   <- data.frame(Petal.Width = seq(0, 3, length.out = 100))
pred     <- predict(test_mod, newdata = newdat, interval = "confidence")
plot(Petal.Length ~ Petal.Width, data = iris, pch = 21, bg = "grey")
polygon(x = c(rev(newdat$Petal.Width), newdat$Petal.Width),
        y = c(rev(pred[, 3]), pred[, 2]), col = "grey")
abline(a = coef(test_mod)[1], lty = 2, b = coef(test_mod)[2], lwd = 2)
@
<<tidy=F, eval=F>>=
test_mod <- lm(Petal.Length ~ Petal.Width, data = iris)
newdat   <- data.frame(Petal.Width = seq(0, 3, length.out = 100))
pred     <- predict(test_mod, newdata = newdat, interval = "confidence")
plot(Petal.Length ~ Petal.Width, data = iris, pch = 21, bg = "grey")
polygon(x = c(rev(newdat$Petal.Width), newdat$Petal.Width), y = c(rev(pred[, 3]), pred[, 2]), col = "grey")
abline(a = coef(test_mod)[1], lty = 2, b = coef(test_mod)[2], lwd = 2)
@
\vspace{-1.25cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/scatter_base_8-1.pdf}
\end{center}
\end{frame}

%%%%%%%%%%%%%
%%%%% BOXPLOT
%%%%%%%%%%%%%

\subsection{Boxplot}

\begin{frame}[fragile]{Baseplot: Boxplot}
Other plot types use different functions.
\vspace{0cm}
<<boxplot_base_1, fig.width=4, fig.height=4,include=F>>=
boxplot(Petal.Length ~ Species, data = iris)
@
<<tidy=F, eval=F>>=
boxplot(Petal.Length ~ Species, data = iris)
@
\vspace{-1.0cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/boxplot_base_1-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Baseplot: Boxplot}
Many of the same changes made to scatterplots can be made here.
\vspace{0cm}
<<boxplot_base_2, fig.width=4, fig.height=4,include=F>>=
boxplot(Petal.Length ~ Species, data = iris, col = "grey", lwd = 2, lty = 1)
@
<<tidy=F, eval=F>>=
boxplot(Petal.Length ~ Species, data = iris, col = "grey", lwd = 2, lty = 1)
@
\vspace{-1.0cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/boxplot_base_2-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Baseplot: Boxplot}
There are also some boxplot specific arguments.
\vspace{0cm}
<<boxplot_base_3, fig.width=4, fig.height=4,include=F>>=
boxplot(Petal.Length ~ Species, data = iris, col = "grey", lwd = 2, lty = 1, boxwex = 0.5, notch = TRUE)
@
<<tidy=F, eval=F>>=
boxplot(Petal.Length ~ Species, data = iris, col = "grey", lwd = 2, lty = 1,
        width = c(1, 2, 1), notch = TRUE)
@
\vspace{-1.25cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/boxplot_base_3-1.pdf}
\end{center}
\end{frame}

%%%%%%%%%%%%%%%%
%%%%% HISTOGRAMS
%%%%%%%%%%%%%%%%

\subsection{Histograms}

\begin{frame}[fragile]{Baseplot: Histogram}
\vspace{0.5cm}
<<hist_base_1, fig.width=4, fig.height=4,include=F>>=
par(mgp = c(2.5, 1, 0))
hist(iris$Petal.Length, main = "")
@
<<tidy=F, eval=F>>=
hist(iris$Petal.Length, main = "")
@
\vspace{-1.25cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/hist_base_1-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Baseplot: Histogram}
\vspace{0.5cm}
<<hist_base_2, fig.width=4, fig.height=4,include=F>>=
par(mgp = c(2.5, 1, 0))
hist(iris$Petal.Length, main = "", breaks = 5, col = "grey")
@
<<tidy=F, eval=F>>=
hist(iris$Petal.Length, main = "", breaks = 5, col = "grey")
@
\vspace{-1.25cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/hist_base_2-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Baseplot: Histogram}
\vspace{0.5cm}
<<hist_base_3, fig.width=4, fig.height=4,include=F>>=
par(mgp = c(2.5, 1, 0))
hist_breaks <- seq(min(iris$Petal.Length), max(iris$Petal.Length), length.out = 10)
hist(iris$Petal.Length, main = "", breaks = hist_breaks, col = "grey")
@
<<tidy=F, eval=F>>=
hist_breaks <- seq(min(iris$Petal.Length), max(iris$Petal.Length), length.out = 10)
hist(iris$Petal.Length, main = "", breaks = hist_breaks, col = "grey")
@
\vspace{-1.25cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/hist_base_3-1.pdf}
\end{center}
\end{frame}

%%%%%%%%%%%%%%%
%%%%% BARGRAPHS
%%%%%%%%%%%%%%%

\subsection{Bargraphs}

\begin{frame}[fragile]{Baseplot: Bargraph}
\vspace{0cm}
<<bar_base_1, fig.width=5, fig.height=4,include=F>>=
par(mgp = c(2.5, 1, 0))
spp_means <- data.frame(Species = c("setosa", "versicolor", "virginica"),
                        mean = as.numeric(by(iris$Petal.Length, iris$Species, mean)),
                        SE = as.numeric(by(iris$Petal.Length, iris$Species, function(x){

    sd(x)/sqrt(length(x))

})))
barplot(height = spp_means$mean, names.arg = spp_means$Species, ylim = c(0, 7),
        xlab = "Species", ylab = "Mean petal length (cm)")
@
<<tidy=F, eval=F>>=
spp_means
barplot(height = spp_means$mean, names.arg = spp_means$Species, ylim = c(0, 7),
        xlab = "Species", ylab = "Mean petal length (cm)")
@
\vspace{-0.5cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/bar_base_1-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Baseplot: Bargraph}
Adding errorbars can be done with the arrows function.
\vspace{0cm}
<<bar_base_2, fig.width=5, fig.height=4,include=F>>=
par(mgp = c(2.5, 1, 0))
spp_means <- data.frame(Species = c("setosa", "versicolor", "virginica"),
                        mean = as.numeric(by(iris$Petal.Length, iris$Species, mean)),
                        SE = as.numeric(by(iris$Petal.Length, iris$Species, function(x){

    sd(x)/sqrt(length(x))

})))
bar_locations <- barplot(height = spp_means$mean, names.arg = spp_means$Species)
barplot(height = spp_means$mean, names.arg = spp_means$Species, ylim = c(0, 7),
        xlab = "Species", ylab = "Mean petal length (cm)")
arrows(x0 = bar_locations[, 1], x1 = bar_locations[, 1],
       y0 = spp_means$mean - spp_means$SE, y1 = spp_means$mean + spp_means$SE,
       angle = 90, lwd = 2, code = 3)
@
<<tidy=F, eval=F>>=
spp_means
bar_locations <- barplot(height = spp_means$mean, names.arg = spp_means$Species)
barplot(height = spp_means$mean, names.arg = spp_means$Species, ylim = c(0, 7),
        xlab = "Species", ylab = "Mean petal length (cm)")
arrows(x0 = bar_locations[, 1], x1 = bar_locations[, 1],
       y0 = spp_means$mean - spp_means$SE, y1 = spp_means$mean + spp_means$SE,
       angle = 90, lwd = 2, code = 3)
@
\vspace{-1.25cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/bar_base_2-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Baseplot: Bargraph}
As before, there are similar arguments available.
\vspace{0cm}
<<bar_base_3, fig.width=5, fig.height=4,include=F>>=
par(mgp = c(2.5, 1, 0))
spp_means <- data.frame(Species = c("setosa", "versicolor", "virginica"),
                        mean = as.numeric(by(iris$Petal.Length, iris$Species, mean)),
                        SE = as.numeric(by(iris$Petal.Length, iris$Species, function(x){

    sd(x)/sqrt(length(x))

})))
bar_locations <- barplot(height = spp_means$mean, names.arg = spp_means$Species)
barplot(height = spp_means$mean, names.arg = spp_means$Species, ylim = c(0, 7),
        xlab = "Species", ylab = "Mean petal length (cm)",
        col = "white", cex.axis = 0.75)
@
<<tidy=F, eval=F>>=
spp_means
bar_locations <- barplot(height = spp_means$mean, names.arg = spp_means$Species)
barplot(height = spp_means$mean, names.arg = spp_means$Species, ylim = c(0, 7),
        xlab = "Species", ylab = "Mean petal length (cm)",
        col = "white", cex.axis = 0.75)
@
\vspace{-1.25cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/bar_base_3-1.pdf}
\end{center}
\end{frame}

%%%%%%%%%%%%%%%%
%%%%% AESTHETICS
%%%%%%%%%%%%%%%%

\subsection{Aesthetics}

\begin{frame}[fragile]{Change text}
You can size and colour of axis text easily.
\vspace{0cm}
<<aes_1, fig.width=4, fig.height=4,include=F>>=
par(mgp = c(2.5, 1, 0))
plot(Petal.Length ~ Petal.Width, data = iris,
     xlab = "Petal Width (cm)", ylab = "Petal Length (cm)",
     cex.lab = 1.25, cex.axis = 1.25, col.axis = "red")
@
<<tidy=F, eval=F>>=
plot(Petal.Length ~ Petal.Width, data = iris,
     xlab = "Petal Width (cm)", ylab = "Petal Length (cm)",
     cex.lab = 1.5, cex.axis = 1.5, col.axis = "red")
@
\vspace{-1.25cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/aes_1-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Combining plots}
You can easily combine multiple baseplots together by changing the global parameters.
\vspace{0cm}
<<aes_2, fig.width=9, fig.height=5,include=F>>=
par(mgp = c(2.5, 1, 0))
par(mfrow = c(1, 2))
plot(Petal.Length ~ Petal.Width, data = iris,
     xlab = "Petal Width (cm)", ylab = "Petal Length (cm)",
     cex.lab = 1.25, cex.axis = 1.25, col.axis = "red")
boxplot(Petal.Length ~ Species, data = iris, col = "grey",
        cex.lab = 0.5, cex.axis = 1.25, col.axis = "red")
par(mfrow = c(1, 1))
@
<<tidy=F, eval=F>>=
par(mfrow = c(1, 2))
plot(Petal.Length ~ Petal.Width, data = iris,
     xlab = "Petal Width (cm)", ylab = "Petal Length (cm)",
     cex.lab = 1.5, cex.axis = 1.5, col.axis = "red")
boxplot(Petal.Length ~ Species, data = iris, col = "grey")
par(mfrow = c(1, 1))
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.7\linewidth]{./figure/aes_2-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Facetting}
This can be used to created 'facet' plots.
\vspace{0cm}
<<aes_3, fig.width=12, fig.height=4,include=F>>=
par(mgp = c(2.5, 1, 0))
par(mfrow = c(1, 3))
split_data <- split(iris, iris$Species)
plot(Petal.Length ~ Petal.Width, data = split_data$setosa, main = "Setosa", pch = 21, bg = "red", col = "black", xlim = range(iris$Petal.Width), ylim = range(iris$Petal.Length))
plot(Petal.Length ~ Petal.Width, data = split_data$virginica, main = "Virginica", pch = 21, bg = "blue", col = "black", xlim = range(iris$Petal.Width), ylim = range(iris$Petal.Length))
plot(Petal.Length ~ Petal.Width, data = split_data$versicolor, main = "Versicolor", pch = 21, bg = "green", col = "black", xlim = range(iris$Petal.Width), ylim = range(iris$Petal.Length))
par(mfrow = c(1, 1))
@
<<tidy=F, eval=F>>=
par(mgp = c(2.5, 1, 0))
par(mfrow = c(1, 3))
split_data <- split(iris, iris$Species)
plot(Petal.Length ~ Petal.Width, data = split_data$setosa, main = "Setosa", pch = 21, bg = "red", col = "black",
     xlim = range(iris$Petal.Width), ylim = range(iris$Petal.Length))
plot(Petal.Length ~ Petal.Width, data = split_data$virginica, main = "Virginica", pch = 21, bg = "blue", col = "black",
     xlim = range(iris$Petal.Width), ylim = range(iris$Petal.Length))
plot(Petal.Length ~ Petal.Width, data = split_data$versicolor, main = "Versicolor", pch = 21, bg = "green", col = "black",
     xlim = range(iris$Petal.Width), ylim = range(iris$Petal.Length))
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.7\linewidth]{./figure/aes_3-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Text family}
Global parameters can also be used to change the font family.
\vspace{0cm}
<<aes_4, fig.width=9, fig.height=5,include=F>>=
par(mgp = c(2.5, 1, 0))
par(mfrow = c(1, 2), family = "serif")
plot(Petal.Length ~ Petal.Width, data = iris,
     xlab = "Petal Width (cm)", ylab = "Petal Length (cm)",
     cex.lab = 1.25, cex.axis = 1.25, col.axis = "red")
boxplot(Petal.Length ~ Species, data = iris, col = "grey",
        cex.lab = 0.75, cex.axis = 1.25, col.axis = "red")
par(mfrow = c(1, 1), family = "sans")
@
<<tidy=F, eval=F>>=
par(mfrow = c(1, 2), family = "serif")

plot(Petal.Length ~ Petal.Width, data = iris,
     xlab = "Petal Width (cm)", ylab = "Petal Length (cm)",
     cex.lab = 1.5, cex.axis = 1.5, col.axis = "red")
boxplot(Petal.Length ~ Species, data = iris, col = "grey")

par(mfrow = c(1, 1), family = "sans")
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.7\linewidth]{./figure/aes_4-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Plot margins}
You can change individual plot margins (\textcolor{blue}{blue}) and outer margins (\textcolor{green}{green}).
<<aes_5, fig.width=9, fig.height=5,include=F>>=
par(mfrow = c(1, 2), mar = c(4, 4, 1, 1),
    oma = c(1.5, 2, 1, 1))
plot(Petal.Length ~ Petal.Width, data = iris,
     xlab = "Petal Width (cm)", ylab = "Petal Length (cm)",
     cex.lab = 1.5, cex.axis = 1.5, col.axis = "red")
boxplot(Petal.Length ~ Species, data = iris, col = "grey",
        cex.lab = 0.75, cex.axis = 1.25, col.axis = "red")
box('figure', col = 'blue', lty = "dashed")
box('outer', col = 'green', lwd = 5)
@
<<tidy=F, eval=F>>=
par(mfrow = c(1, 2), mar = c(4, 4, 1, 1),
    oma = c(1.5, 2, 1, 1))
plot(Petal.Length ~ Petal.Width, data = iris, xlab = "Petal Width (cm)", ylab = "Petal Length (cm)",
     cex.lab = 1.5, cex.axis = 1.5, col.axis = "red")
boxplot(Petal.Length ~ Species, data = iris, col = "grey", cex.lab = 0.75, cex.axis = 1.5, col.axis = "red")
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.7\linewidth]{./figure/aes_5-1.pdf}
\end{center}
\end{frame}

\subsection{Saving your plot}

\begin{frame}[fragile]{Baseplot: Exporting}
<<tidy=F, eval=F>>=
?pdf ?jpeg ?tiff ?bmp ?postscript
@
\vspace{0.5cm}
<<tidy=F, eval=F>>=
pdf("base_plot.pdf", width = 15, height = 5)
plot(Petal.Length ~ Petal.Width, data = iris)
dev.off()
@
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% START GGPLOT SECTION %

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Plotting with ggplot}

\begin{frame}[fragile]{ggplot: An introduction}
Unlike baseplot, ggplot works around a single function.
We use different functions to add layers onto a ggplot.
\vspace{0.5cm}
<<scatter_gg_2, fig.width=3, fig.height=3,include=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length))
@
<<tidy=F, eval=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length))
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/scatter_gg_2-1.pdf}
\end{center}
\end{frame}

%%%%%%%%%%%%%%%%%
%%%%% SCATTERPLOT
%%%%%%%%%%%%%%%%%

\subsection{Scatter plot}

\begin{frame}[fragile]{ggplot: Scatter plots}
We build onto our initial ggplot argument.
\vspace{0.5cm}
<<scatter_gg_3, fig.width=3, fig.height=3,include=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point()
@
<<tidy=F, eval=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point()
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/scatter_gg_3-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{ggplot: Scatter plots}
You can change point shapes (shape) and colour (colour).
The numbers used here are \textbf{the same} as the ones we used above.
\vspace{0.5cm}
<<scatter_gg_4, fig.width=4, fig.height=3,include=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point(aes(colour = Species), shape = 16, size = 3)
@
<<tidy=F, eval=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point(aes(colour = Species), shape = 16, size = 3)
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.5\linewidth]{./figure/scatter_gg_4-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{ggplot: Scatter plots}
In ggplot the legend is included by default. You will need to manually remove it.
\vspace{0cm}
<<scatter_gg_5, fig.width=3, fig.height=3,include=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point(aes(colour = Species), shape = 16, size = 3)+
  theme(legend.position = "none")
@
<<tidy=F, eval=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point(aes(colour = Species), shape = 16, size = 3)+
  theme(legend.position = "none")
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/scatter_gg_5-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{The aesthetic argument}
The aesthetic argument in ggplot (aes) is a powerful tool for changing plot aesthetics.
If you specify an aesthetic argument inside aes() it will give each data point a different aesthetic based on its value.
If you specify the same aesthetic argument outside aes() it will give all data points the same aesthetic.
\vspace{0cm}
\begin{columns}
\column[t]{0.48\linewidth}
<<scatter_gg_6a, fig.width=4, fig.height=3,include=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point(aes(colour = Species), shape = 16, size = 3)
@
<<tidy=F, eval=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point(aes(colour = Species), shape = 16, size = 3)
@
\vspace{0cm}
\begin{center}
\includegraphics[width = 1\linewidth]{./figure/scatter_gg_6a-1.pdf}
\end{center}
\column[t]{0.48\linewidth}
<<scatter_gg_6b, fig.width=4, fig.height=3,include=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point(colour = "blue", shape = 16, size = 3)
@
<<tidy=F, eval=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point(colour = "blue", shape = 16, size = 3)
@
\vspace{0cm}
\begin{center}
\includegraphics[width = 1\linewidth]{./figure/scatter_gg_6b-1.pdf}
\end{center}
\end{columns}
\pause
Here, we have used aes() to apply colours. However, we will use it later to make other changes.
\end{frame}

\begin{frame}[fragile]{Beware}
Again, there is a difference between outline colour (colour) and backgroun colour (fill).
\begin{columns}
\column[t]{0.48\linewidth}
<<scatter_gg_7a, fig.width=4, fig.height=3,include=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point(aes(colour = Species), fill = "black", shape = 21, size = 3)
@
<<tidy=F, eval=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point(aes(colour = Species), fill = "black",
             shape = 21, size = 3)
@
\vspace{0cm}
\begin{center}
\includegraphics[width = 1\linewidth]{./figure/scatter_gg_7a-1.pdf}
\end{center}
\column[t]{0.48\linewidth}
<<scatter_gg_7b, fig.width=4, fig.height=3,include=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point(aes(fill = Species), colour = "black", shape = 21, size = 3)
@
<<tidy=F, eval=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point(aes(fill = Species), colour = "black",
             shape = 21, size = 3)
@
\vspace{0cm}
\begin{center}
\includegraphics[width = 1\linewidth]{./figure/scatter_gg_7b-1.pdf}
\end{center}
\end{columns}
\end{frame}

\begin{frame}[fragile]{ggplot: Scatter plots}
You can add lines to the plot.
\vspace{0cm}
<<scatter_gg_8, fig.width=3, fig.height=3,include=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point(aes(fill = Species), shape = 21, size = 3)+
  theme(legend.position = "none")+
  geom_hline(yintercept = 4, lty = 3)+
  geom_vline(xintercept = 1.3, lty = 2)+
  geom_abline(intercept = 1.084, slope = 2.23, lty = 1)
@
<<tidy=F, eval=F>>=
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point(aes(fill = Species), shape = 21, size = 3)+
  theme(legend.position = "none")+
  geom_hline(yintercept = 4, lty = 3)+
  geom_vline(xintecept = 1.3, lty = 2)+
  geom_abline(intercept = 1.084, slope = 2.23, lty = 1)
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/scatter_gg_8-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Baseplot: Scatter plots}
You can add text and arrows.
<<scatter_gg_9, fig.width=3, fig.height=3,include=F>>=
max.value <- iris[iris$Petal.Length == max(iris$Petal.Length), ]
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point(aes(fill = Species), shape = 21, size = 3)+
  theme(legend.position = "none")+
  geom_segment(aes(x = max.value$Petal.Width - 0.75,
                   xend = max.value$Petal.Width, y = max.value$Petal.Length,
                   yend = max.value$Petal.Length), size = 1,
               arrow = arrow(length = unit(0.5, "cm")))+
  geom_text(aes(x = max.value$Petal.Width - 0.9, y = max.value$Petal.Length, label = "Max"))
@
<<tidy=F, eval=F>>=
max.value <- iris[iris$Petal.Length == max(iris$Petal.Length), ]
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length)) +
  geom_point(aes(fill = Species), shape = 21, size = 3)+
  theme(legend.position = "none")+
  geom_segment(aes(x = max.value$Petal.Width - 0.75, xend = max.value$Petal.Width,
                   y = max.value$Petal.Length, yend = max.value$Petal.Length), size = 1, arrow = arrow(length = unit(0.5, "cm")))+
  geom_text(aes(x = max.value$Petal.Width - 0.9, y = max.value$Petal.Length, label = "Max"))
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/scatter_gg_9-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{ggplot: Scatter plots}
In ggplot, confidence intervals can be added with specialised function geom_ribbon.
\vspace{0cm}
<<scatter_gg_10, fig.width=3, fig.height=3, include=F>>=
test_mod <- lm(Petal.Length ~ Petal.Width, data = iris)
newdat   <- data.frame(Petal.Width = seq(0, 3, length.out = 100))
pred     <- predict(test_mod, newdata = newdat, interval = "confidence")
ggplot() +
  geom_point(data = iris, aes(x = Petal.Width, y = Petal.Length), fill = "grey", shape = 21, size = 3) +
  geom_ribbon(data = NULL, aes(x = newdat$Petal.Width, ymin = pred[, 2], ymax = pred[, 3]), fill = "grey", alpha = 0.5) +
  geom_abline(intercept = coef(test_mod)[1], slope = coef(test_mod)[2], lty = 2) +
  theme(legend.position = "none")

@
<<tidy=F, eval=F>>=
test_mod <- lm(Petal.Length ~ Petal.Width, data = iris)
newdat   <- data.frame(Petal.Width = seq(0, 3, length.out = 100))
pred     <- predict(test_mod, newdata = newdat, interval = "confidence")
ggplot() +
  geom_point(data = iris, aes(x = Petal.Width, y = Petal.Length), fill = "grey", shape = 21, size = 3) +
  geom_ribbon(data = NULL, aes(x = newdat$Petal.Width, ymin = pred[, 2], ymax = pred[, 3]), fill = "grey", alpha = 0.5) +
  geom_abline(intercept = coef(test_mod)[1], slope = coef(test_mod)[2], lty = 2) +
  theme(legend.position = "none")
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/scatter_gg_10-1.pdf}
\end{center}
\pause
\textbf{Note:} Because we are building the plot with two different datasets (i.e. newdat and iris) we specify the data separately in each line of the ggplot code.
\end{frame}

%%%%%%%%%%%%%%%%%
%%%%% BOXPLOT
%%%%%%%%%%%%%%%%%

\subsection{Boxplot}

\begin{frame}[fragile]{ggplot: Boxplot}
We build different plot types in a similar way.
\vspace{0.5cm}
<<boxplot_gg_1, fig.width=3, fig.height=3,include=F>>=
ggplot(iris, aes(x = Species, y = Petal.Length))+
  geom_boxplot()
@
<<tidy=F, eval=F>>=
ggplot(iris, aes(x = Species, y = Petal.Length))+
  geom_boxplot()
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/boxplot_gg_1-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{ggplot: Boxplot}
\vspace{0.5cm}
<<boxplot_gg_2, fig.width=3, fig.height=3,include=F>>=
ggplot(iris, aes(x = Species, y = Petal.Length))+
  geom_boxplot(fill = "grey", size = 1, lty = 1)
@
<<tidy=F, eval=F>>=
ggplot(iris, aes(x = Species, y = Petal.Length))+
  geom_boxplot(fill = "grey", size = 1, lty = 1)
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/boxplot_gg_2-1.pdf}
\end{center}
\end{frame}

%%%%%%%%%%%%%%%%%
%%%%% HISTOGRAM
%%%%%%%%%%%%%%%%%

\subsection{Histograms}

\begin{frame}[fragile]{ggplot: Histogram}
\vspace{0.5cm}
<<hist_gg_1, fig.width=3, fig.height=3,include=F>>=
ggplot(iris, aes(x = Petal.Length))+
  geom_histogram()
@
<<tidy=F, eval=F>>=
ggplot(iris, aes(x = Petal.Length))+
  geom_histogram()
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/hist_gg_1-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{ggplot: Histogram}
\vspace{0.5cm}
<<hist_gg_2, fig.width=3, fig.height=3,include=F>>=
ggplot(iris, aes(x = Petal.Length))+
  geom_histogram(binwidth = 0.5, colour = "black", fill = "grey")
@
<<tidy=F, eval=F>>=
ggplot(iris, aes(x = Petal.Length))+
  geom_histogram(binwidth = 0.5, colour = "black", fill = "grey")
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/hist_gg_2-1.pdf}
\end{center}
\end{frame}

%%%%%%%%%%%%%%%%%
%%%%% BARGRAPH
%%%%%%%%%%%%%%%%%

\subsection{Bargraphs}

\begin{frame}[fragile]{ggplot: Bargraph}
\vspace{0.5cm}
<<bar_gg_1, fig.width=3, fig.height=3,include=F>>=
spp_means <- data.frame(Species = c("setosa", "versicolor", "virginica"),
                        mean = as.numeric(by(iris$Petal.Length, iris$Species, mean)),
                        SE = as.numeric(by(iris$Petal.Length, iris$Species, function(x){

    sd(x)/sqrt(length(x))

})))
ggplot(spp_means, aes(x = Species, y = mean))+
  geom_col()
@
<<tidy=F, eval=F>>=
ggplot(spp_means, aes(x = Species, y = mean))+
  geom_col()
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/bar_gg_1-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{ggplot: Bargraph}
Adding errorbars in ggplot is much easier than baseplot.
\vspace{0.5cm}
<<bar_gg_2, fig.width=3, fig.height=3,include=F>>=
spp_means <- data.frame(Species = c("setosa", "versicolor", "virginica"),
                        mean = as.numeric(by(iris$Petal.Length, iris$Species, mean)),
                        SE = as.numeric(by(iris$Petal.Length, iris$Species, function(x){

    sd(x)/sqrt(length(x))

})))
ggplot(spp_means, aes(x = Species, y = mean))+
  geom_col()+
  geom_errorbar(aes(ymin = mean - SE, ymax = mean + SE), width = 0.5)
@
<<tidy=F, eval=F>>=
ggplot(spp_means, aes(x = Species, y = mean))+
  geom_col()+
  geom_errorbar(aes(ymin = mean - SE, ymax = mean + SE), size = 1, width = 0.5)
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/bar_gg_2-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{ggplot: Bargraph}
\vspace{0.5cm}
<<bar_gg_3, fig.width=3, fig.height=3,include=F>>=
ggplot(spp_means, aes(x = Species, y = mean))+
  geom_col(fill = "white", colour = "black")
@
<<tidy=F, eval=F>>=
ggplot(spp_means, aes(x = Species, y = mean))+
  geom_col(fill = "white", colour = "black")
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/bar_gg_3-1.pdf}
\end{center}
\end{frame}

%%%%%%%%%%%%%%%%%
%%%%% AESTHETICS
%%%%%%%%%%%%%%%%%

\subsection{Aesthetics}

\begin{frame}{Introduction to themes}
In ggplot, you can change aesthetics in individual segments of the code \textit{or} you can change information for the whole plot using theme.
\end{frame}

\begin{frame}[fragile]{Using the aesthetic argument more}
We'll start by looking back at the aesthetic (aes) argument.
We can use it to change multiple different aesthetics of a plot.
\vspace{0cm}
<<aes_gg_1, fig.width=4, fig.height=3,include=F>>=
ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point(aes(fill = Species, size = Sepal.Length), shape = 21)
@
<<tidy=F, eval=F>>=
ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point(aes(fill = Species, size = Sepal.Length), shape = 21)
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/aes_gg_1-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Using the aesthetic argument more}
\vspace{0cm}
<<aes_gg_2, fig.width=4, fig.height=3,include=F>>=
ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point(aes(fill = Species, alpha = Sepal.Length), shape = 21, size = 5)
@
<<tidy=F, eval=F>>=
ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point(aes(fill = Species, alpha = Sepal.Length), shape = 21, size = 5)
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/aes_gg_2-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Using the aesthetic argument more}
Applying aesthetics to continuous variables will be different to categorical variables.
\vspace{0cm}
<<aes_gg_3, fig.width=4, fig.height=3,include=F>>=
ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point(aes(fill = Sepal.Length), shape = 21, size = 5)
@
<<tidy=F, eval=F>>=
ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point(aes(fill = Sepal.Length), shape = 21, size = 5)
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/aes_gg_3-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Using the aesthetic argument more}
We can adjust the way the aesthetics are applied.
\vspace{0cm}
\begin{columns}
\column[t]{0.48\linewidth}
<<aes_gg_4a, fig.width=4, fig.height=3,include=F>>=
ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point(aes(fill = Sepal.Length), shape = 21, size = 5)+
  scale_fill_continuous(low = "white", high = "black")
@
<<tidy=F, eval=F>>=
ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point(aes(fill = Sepal.Length), shape = 21, size = 5)+
  scale_fill_continuous(low = "white", high = "black")
@
\vspace{0cm}
\begin{center}
\includegraphics[width = 0.7\linewidth]{./figure/aes_gg_4a-1.pdf}
\end{center}
\column[t]{0.48\linewidth}
<<aes_gg_4b, fig.width=4, fig.height=3,include=F>>=
ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point(aes(size = Sepal.Length), shape = 21, fill = "grey")+
  scale_size_continuous(range = c(3, 10))
@
<<tidy=F, eval=F>>=
ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point(aes(size = Sepal.Length), shape = 21, fill = "grey")+
  scale_size_continuous(range = c(3, 10))
@
\vspace{0cm}
\begin{center}
\includegraphics[width = 0.7\linewidth]{./figure/aes_gg_4b-1.pdf}
\end{center}
\end{columns}
\end{frame}

\begin{frame}[fragile]{Change text}
You can change size and colour of axis text easily. Note that text size uses different measurement units.
\vspace{0cm}
<<aes_gg_5, fig.width=3, fig.height=3,include=F>>=
ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point()+
  xlab("Petal Width (cm)")+
  ylab("Petal Length (cm")+
  theme(axis.text = element_text(size = 12, colour = "red"),
        axis.title = element_text(size = 12))
@
<<tidy=F, eval=F>>=
ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point()+
  xlab("Petal Width (cm)")+
  ylab("Petal Length (cm")+
  theme(axis.text = element_text(size = 12, colour = "red"),
        axis.title = element_text(size = 12))
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/aes_gg_5-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Combining plots}
Combining plots it much less straightforward in ggplot.
You need to use an additional package.
\vspace{0cm}
<<aes_gg_6, fig.width=6, fig.height=4,include=F>>=
scatter <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point()+
  xlab("Petal Width (cm)")+
  ylab("Petal Length (cm")+
  theme(axis.text = element_text(size = 12, colour = "red"), axis.title = element_text(size = 12))

box     <- ggplot(iris, aes(x = Species, y = Petal.Length))+
  geom_boxplot()+
  theme(axis.text = element_text(size = 12, colour = "red"),
        axis.title = element_text(size = 12))

gridExtra::grid.arrange(scatter, box, nrow = 1)
@
<<tidy=F, eval=F>>=
scatter <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point()+
  xlab("Petal Width (cm)")+
  ylab("Petal Length (cm")+
  theme(axis.text = element_text(size = 12, colour = "red"), axis.title = element_text(size = 12))
box     <- ggplot(iris, aes(x = Species, y = Petal.Length))+
  geom_boxplot()+
  theme(axis.text = element_text(size = 12, colour = "red"), axis.title = element_text(size = 12))
gridExtra::grid.arrange(scatter, box, nrow = 1)
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/aes_gg_6-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Faceting}
Although combining multiple plots is cumbersome, there is an inbuilt option to create facets.
\vspace{0cm}
<<aes_gg_7, fig.width=7, fig.height=4,include=F>>=
ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point(aes(fill = Species), shape = 21, colour = "black", size = 3)+
  xlab("Petal Width (cm)")+
  ylab("Petal Length (cm)")+
  facet_wrap(~Species) +
  theme(axis.text = element_text(size = 12, colour = "red"), axis.title = element_text(size = 12))
@
<<tidy=F, eval=F>>=
ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point(aes(fill = Species), shape = 21, colour = "black", size = 3)+
  xlab("Petal Width (cm)")+
  ylab("Petal Length (cm)")+
  facet_wrap(~Species) +
  theme(axis.text = element_text(size = 12, colour = "red"), axis.title = element_text(size = 12))
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.6\linewidth]{./figure/aes_gg_7-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Text family}
Unlike baseplot, in ggplot you can change font family of individual elements in theme.
\vspace{0cm}
<<aes_gg_8, fig.width=7, fig.height=4,include=F>>=
scatter <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point()+
  xlab("Petal Width (cm)")+
  ylab("Petal Length (cm")+
  theme(axis.text = element_text(size = 12, colour = "red", family = "serif"),
        axis.title = element_text(size = 12, family = "mono"))

box     <- ggplot(iris, aes(x = Species, y = Petal.Length))+
  geom_boxplot()+
  theme(axis.text = element_text(size = 12, colour = "red", family = "sans"),
        axis.title = element_text(size = 12, family = "sans"))

gridExtra::grid.arrange(scatter, box, nrow = 1)
@
<<tidy=F, eval=F>>=
scatter <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point()+
  xlab("Petal Width (cm)")+
  ylab("Petal Length (cm")+
  theme(axis.text = element_text(size = 12, colour = "red", family = "serif"), axis.title = element_text(size = 12, family = "mono"))
box     <- ggplot(iris, aes(x = Species, y = Petal.Length))+
  geom_boxplot()+
  theme(axis.text = element_text(size = 12, colour = "red", family = "sans"), axis.title = element_text(size = 12, family = "sans"))
gridExtra::grid.arrange(scatter, box, nrow = 1)
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/aes_gg_8-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Plot margins}
Plot margins are also controlled in theme of each plot individually.
\vspace{0cm}
<<aes_gg_9, fig.width=7, fig.height=4,include=F>>=
scatter <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point()+
  xlab("Petal Width (cm)")+
  ylab("Petal Length (cm")+
  theme(axis.text = element_text(size = 12, colour = "red"),
        axis.title = element_text(size = 12),
        plot.margin = unit(c(30, 4, 1, 1), "mm"))

box     <- ggplot(iris, aes(x = Species, y = Petal.Length))+
  geom_boxplot()+
  theme(axis.text = element_text(size = 12, colour = "red"),
        axis.title = element_text(size = 12))

gridExtra::grid.arrange(scatter, box, nrow = 1)
@
<<tidy=F, eval=F>>=
scatter <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point()+
  xlab("Petal Width (cm)")+
  ylab("Petal Length (cm")+
  theme(axis.text = element_text(size = 12, colour = "red"), axis.title = element_text(size = 12),
        plot.margin = unit(c(4, 4, 1, 1), "mm"))
box     <- ggplot(iris, aes(x = Species, y = Petal.Length))+
  geom_boxplot()+
  theme(axis.text = element_text(size = 12, colour = "red"), axis.title = element_text(size = 12))
gridExtra::grid.arrange(scatter, box, nrow = 1)
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/aes_gg_9-1.pdf}
\end{center}
\end{frame}

\begin{frame}[fragile]{Preset themes}
ggplot also has a number of preset themes that you can use.
\vspace{0cm}
<<aes_gg_10, fig.width=9, fig.height=4,include=F>>=
grey <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point()+
  theme_grey()

bw <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point()+
  theme_bw()

classic <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point()+
  theme_classic()

gridExtra::grid.arrange(grey, bw, classic, nrow = 1)
@
<<tidy=F, eval=F>>=
grey <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point()+
  theme_grey()
bw <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point()+
  theme_bw()
classic <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point()+
  theme_classic()
gridExtra::grid.arrange(grey, bw, classic, nrow = 1)
@
\vspace{0cm}
\begin{center}
\includegraphics[width=0.6\linewidth]{./figure/aes_gg_10-1.pdf}
\end{center}
\end{frame}

\subsection{Saving your plot}

\begin{frame}[fragile]{ggplot: Exporting}
<<tidy=F, eval=F>>=
?ggsave
@
\vspace{0.5cm}
<<tidy=F, eval=F>>=
classic <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length))+
  geom_point()+
  theme_classic()
ggsave("ggplot.pdf", plot = classic, width = 15, height = 5)
@
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% COMPARE THE TWO %

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Which one to use?}

\begin{frame}{Which plotting tool should you use?}
\begin{columns}
\column[t]{0.4\linewidth}
\begin{block}{Baseplot:}
\begin{itemize}
  \item No new packages required
  \item Easy to combine many plots
  \item Looks good out of the box (but harder to customise)
\end{itemize}
\end{block}
\pause
\column[t]{0.4\linewidth}
\begin{block}{ggplot:}
\begin{itemize}
  \item Requires multiple packages for best results
  \item More difficult to combine many plots
  \item Easy to customise (but looks poor out of the box)
  \item Faster. Better for bigger datasets
\end{itemize}
\end{block}
\end{columns}
\end{frame}

\begin{frame}{Which plotting tool should you use?}
\textbf{It is useful to know both!!}
\end{frame}

%\end{comment}

\end{document}
