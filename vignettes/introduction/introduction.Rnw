%\VignetteIndexEntry{Introduction}
%\VignetteEngine{R.rsp::tex}

\documentclass[xcolor=dvipsnames, aspectratio=1610, 9pt]{beamer}
\usepackage[utf8]{inputenc}
\usepackage[UKenglish]{babel}
\usepackage{verbatim}%for comment environment
\usepackage{pdfpages} %for importing specific pages from pdf
\usepackage{ragged2e}%pour justifier le text, apr√®s il suffit de tapper \justifying avant le paragraphe
\setbeamertemplate{navigation symbols}{}%no nav symbols
\usetheme[secheader]{Madrid}%

\def\R{{\Large \bf R}}
\def\S{{\Large \bf S}}
\def\r{{\bf R}}
\def\s{{\bf S}}

\title{Getting starting with \r}
\author[Alexandre Courtiol]{Alexandre Courtiol}
\institute[IZW]{Leibniz Institute of Zoo and Wildlife Research}%
\date[June 2018]{\small June 2018}%

\begin{document}
\setlength{\topsep}{1pt}%space between input and output
<<knitr options, echo = FALSE, message = FALSE>>=
  options(width = 60)
library(knitr)
opts_chunk$set("size" = "scriptsize")
@

\AtBeginSection[]{
     \begin{frame}
     \frametitle{Getting started with \R}
     \setcounter{tocdepth}{1}
     \tableofcontents[currentsection]
     \end{frame}
}

\AtBeginSubsection[]{
     \begin{frame}
     \frametitle{Getting started with \R}
     \setcounter{tocdepth}{2}
     \tableofcontents[currentsubsection]
     \end{frame}
}

\maketitle


\begin{frame}{Who am I?}
\begin{itemize}
\item evolutionary biologist / statistician
\item studies in France (Montpellier), postdoc in the UK (Sheffield)
\item researcher at Leibniz IZW / lecturer at Freie University
\item experience with \R:
  \begin{itemize}
  \item 2003 --: study \r \ (still ongoing)
  \item 2008 --: use \r \ most days
  \item 2010 --: teach \r
  \item 2016 --: develop \r \ packages
  \end{itemize}
\end{itemize}
\end{frame}


\section{What is \r?}


\subsection{\r \ in brief}


\begin{frame}{\r \ in brief}
\justifying
\R \ is a programming language and software environment for statistical computing \& graphics.
\vfill
Key points about \R:
\begin{itemize}
\item free \underline{for all}
\item open source (explore: \url{https://github.com/wch/r-source})
\pause
\item polyvalent:
  \begin{itemize}
  \item from laptop to most advanced supercomputers
  \item local or remote
  \item Windows, MacOS, linux or many other Unix-based systems
  \end{itemize}
\pause
\item rich (tons of \r \ packages out there)
\item cutting edge (check updates for today: \url{http://dirk.eddelbuettel.com/cranberries/cran/updated/})
\pause
\item used by millions
\item \r \ is the best software environment for statistical computing, but it is far from perfect!
\end{itemize}
\end{frame}



\subsection{The history and pre-history of \r}


\begin{frame}{A short history of \S/\R}
\S \ (\url{http://ect.bell-labs.com/sl/S/})
\begin{itemize}
\item 1976-1980: version 1: interactive statistical system, Fortran based (Becker, Chambers, \& al. at Bell Labs)
%Bells Labs is now owned by NOKIA
\item 1980-1988: version 2: portable version (thanks to Unix) %unix was conceived one floor upstair at Bell Labs, C and C++ are also coming from Bells Labs (New Jersey)
\item 1988: version 3 (\s3): ``everything is an object" paradigm, C-based (very much like R)
\item 1991: a large statistical modeling toolbox is added to \s3
\item 1993: \s+ exclusive license (to StatSci, later MathSoft, later SolutionMetrics)
\item 1998: version 4 (\s4): advanced object-oriented features
\item 2012: \s+ becomes TIBCO Enterprise Runtime for R (TERR)
\end{itemize}
\vfill

\pause
%Due to the ownership of \s \ by a phone company, \s \ could not be free, nor open source. Hence \R!
%developper of S try to keep it non commercial as much they could!

\R \ (\url{https://www.r-project.org/about.html})
\begin{itemize}
\item 1993: the replication of \s \ as the \r \ project starts (Ihaka \& Gentleman at University of Auckland)
\item 23/04/1997: first version of \r \ archieved on The Comprehensive R Archive Network (CRAN) %and creation of CRAN
\item 05/12/1997: \r \ version 0.6 is part of GNU project (``freedom to share, freedom to change")
\item 29/02/2000: \r \ version 1.0 (judged stable enough for production use by the R Development Core Team)
\end{itemize}
\end{frame}


\subsection{Why using \r?}


\begin{frame}{Is \R \ good for you?}
\begin{columns}
\column[t]{0.4\linewidth}
\begin{block}{Good for:}
\begin{itemize}
  \item data manipulation
  \item plots, including GIS
  \item analysing small, medium and big data
  \item programming around data
\end{itemize}
\end{block}
\pause
\column[t]{0.4\linewidth}
\begin{block}{Not optimal for:}
\begin{itemize}
  \item beginners
  \item data entry
  \item formal algebra
\end{itemize}
\end{block}
\end{columns}
\end{frame}


\subsection{Who uses \r?}


\begin{frame}{Who uses \R?}
\begin{center}
\includegraphics[height=0.7\textheight]{../figures/rexer2015.png}
\end{center}
Rexer Analytics\\
{\small [1220 analytic professionals from 72 countries participated in this survey]}
\end{frame}


\begin{frame}{What else?}
\begin{center}
\includegraphics[height=0.8\textheight]{../figures/rexer2015details.png}
\end{center}
\vfill
Rexer Analytics
\end{frame}


{
\setbeamercolor{background canvas}{bg=}
\includepdf[pages={6,7}]{../figures/Rexer2017.pdf}
}


\begin{frame}{Rich companies rely on \R \ too!}
Some examples from a blog post (\url{http://blog.revolutionanalytics.com/2014/05/companies-using-r-in-2014.html})
\vfill
\begin{small}
\begin{itemize}
\item Facebook (data analysis, big-data visualization, user behaviour analysis)
\item Google (advertising effectiveness, economic forecasting, and big-data statistical modeling)
\item Twitter (data visualization and semantic clustering)
\item The City of Chicago (food poisoning monitoring)
\item The New York Times (interactive features such as the Dialect Quiz and the Election Forecast)
\item Microsoft (Xbox matchmaking)
\item The Human Rights Data Analysis Group (counts of casualties in war zones)
\item ANZ Bank (credit risk analysis)
\item The FDA (regulatory drug approvals process)
\item Monsanto (statistical analysis in plant breeding, fertility mapping and yield forecasting)
\item Lloyds of London (risk analysis and catastrophe modeling)
\item RealClimate.org (climate change analysis)
\item NOAA (flood warnings)
\end{itemize}
\end{small}
\end{frame}


\section{First steps in \r}


\subsection{Installing \r}


\begin{frame}{Installation steps}
  \begin{enumerate}
  %\item set the internet proxy: 192.168.2.2:3128
  \item check that you do get internet access
  \item install \r: \url{https://cran.r-project.org/}
  \item install RStudio: \url{https://www.rstudio.com/products/rstudio/download/}
  \item open RStudio
  \end{enumerate}
\vfill
Note: we will use RStudio but you don't have to (RStudio is free but \underline{not for all}).
\end{frame}


\begin{frame}{RStudio}
\begin{center}
\includegraphics[width=0.9\linewidth]{../figures/RStudio.png}
\end{center}
\end{frame}


\begin{frame}{Better default setting for RStudio}
\begin{center}
\includegraphics[height=0.9\textheight]{../figures/RStudio_settings.png}
\end{center}
\end{frame}

\subsection{Arithmetic}


\begin{frame}[fragile]{Basic arithmetic}
Try in the following in the ``Console" pannel:
<<arithmetic>>=
1 + 1
1 - 1
2 * pi
3 / 2
10 %% 3
5^2
5^2 + 1
5^(2+1)
5^(2 + 1)
@
\vfill
Conclusion: you may never need a hand calculator anymore!
\end{frame}


\subsection{Script}


\begin{frame}<1>[label = goodpractice]{Good practice}
\begin{enumerate}
\item<1-> only use the ``Console" pannel to mess around
\item<1-> write a script and comment it properly
\item<1-> make sure your script always work
\item<2-> store each result as an object with a useful name
\end{enumerate}
\end{frame}


\begin{frame}{The concept of an \R \ script}
All instructions must be written as a computer script!
\begin{itemize}
\item it is just a text file (no need for R to read it, it never gets corrupted)
\item the script must be saved at a known location
\item all non-\r \ instruction must be preceeded by \#
\end{itemize}

\vfill
Why bother?
\begin{itemize}
\item transparent \& reproducible
\item easy to share \& modify
\end{itemize}
\end{frame}


\againframe<2>{goodpractice}


\subsection{Objects}


\begin{frame}[fragile]{Creating objects}
Objects are being assigned using the ``arrow" operator:
<<one plus one>>=
one.plus.one <- 1 + 1 # storing the result
@

\vfill

Objects are being used through their name (that is the whole point):

<<display one plus one>>=
one.plus.one # displaying the result
one.plus.one.plus.one <- one.plus.one + 1
one.plus.one.plus.one
@

\vfill

Tip:
<<one times two>>=
(one.times.two <- 1 * 2) # storing and displaying the result
@
\vfill
Note 1: avoid spaces \& weird characters in object names to avoid troubles.

Note 2: names are case sensitive.
\end{frame}


\begin{frame}[fragile]{Common mistakes}
The huge majority of beginners problems are typos:
<<mistakes, tidy=F>>=
one.plus.one
one.plus.two
one.plusone
1 +
one.plus.one <- 1 + 1
@
\end{frame}


\begin{frame}{The concept of an \R \ object}
What is an object?
\begin{itemize}
\item everything in \r \ is an object (more on that later)
\item objects have names
\item objects allow astraction
\item objects belongs to classes for which specific methods exist (and can be created)
\end{itemize}
\end{frame}


\begin{frame}[fragile]{Note for geeks who know other computer languages}
\r \ objects are (by default) not mutable (there is copy on demand):
<<not mutable>>=
a <- 1
b <- a
b <- b + 1
b
a
@
\end{frame}


\subsection{Functions}


\begin{frame}[fragile]{Functions}
<<citation, eval=FALSE>>=
citation()  # function showing how to cite R
@
<<citation run, eval=TRUE, echo=FALSE, size="tiny">>=
citation()
@
<<help citation, eval=FALSE, tidy=FALSE>>=
help(citation) # getting help for this function
?citation() # same but shorter (syntactic sugar)
@
\end{frame}


\begin{frame}[fragile]{Functions}
<<mean, eval=F, echo=T>>=
mean()
@
<<help mean, eval=F, tidy=F>>=
?mean()
@
\begin{scriptsize}
\begin{verbatim}
Usage:
     mean(x, ...)
     ## Default S3 method:
     mean(x, trim = 0, na.rm = FALSE, ...)

Arguments:
       x: An R object.  Currently there are methods for numeric/logical
          vectors and date, date-time and time interval objects, and
          for data frames all of whose columns have a method.  Complex
          vectors are allowed for ‚Äòtrim = 0‚Äô, only.
    trim: the fraction (0 to 0.5) of observations to be trimmed from
          each end of ‚Äòx‚Äô before the mean is computed.  Values of trim
          outside that range are taken as the nearest endpoint.
   na.rm: a logical value indicating whether ‚ÄòNA‚Äô values should be
          stripped before the computation proceeds.
[...]
\end{verbatim}
\end{scriptsize}
\end{frame}


\begin{frame}[fragile]{Syntax for functions}
Basic syntax:
<<example function>>=
sign(x = -5)
sign(-5) # dangerous: avoid!
sign(y = -5)
@

\vfill

Equal signs and arrows are not the same:
<<equal vs arrows>>=
sign(y <- -5) # dangerous: avoid!
y
sign(x = y <- -5) # same as above
@
\end{frame}


\begin{frame}[fragile]{Syntax for functions}
Not puting the parentheses shows the definition of the function:
<<function def>>=
sign
@

\vfill

All functions need parentheses and exceptions correspond to syntactic sugar:
<<syntactic sugar>>=
1 + 1
`+`(1, 1)
a <- 1
a
`<-`(a, 1)
a
@
\end{frame}


\begin{frame}[fragile]{Finding functions}
To find the name of the function you are look for, you may try:
<<finding function, eval = FALSE>>=
??"linear model"
@

or

<<finding function 2, eval = FALSE>>=
help.search(pattern = "linear model", package = "stats")  # if you know where to look for
@
\end{frame}


\subsection{Packages}


\begin{frame}[fragile]{The concept of an \R \ package}

Packages extend \r \ functionalities:
\begin{itemize}
\item for most users; e.g. \verb+ggplot2+
\item for specific users; e.g. \verb+IsoriX+
\item for developpers; eg. \verb+Rcpp+
\end{itemize}

\vfill

Key facts about packages:
\begin{itemize}
\item a package is a folder (often compressed) containing \r \ functions, data \& documentation
\item a library is an installed package
\item there are tons of packages out there:
\begin{itemize}
\item \Sexpr{nrow(available.packages(contriburl="http://cran.rstudio.com/src/contrib"))} packages are available on \url{cran.r-project.org}
\item $\sim$ 1500 packages aimed at bioinformatic on \url{bioconductor.org}
\item many more on \url{github.com}
\item many more shared between users in other ways
\end{itemize}
\end{itemize}

\vfill

Note: packages can be used to create research compendia!

\end{frame}


\begin{frame}[fragile]{Installing a package}

Simple situation: the package is available as binary for your system on CRAN
<<install package, eval=FALSE>>=
install.packages("dpylr")
@

\vfill

In general, the installation procedure depends on:
\begin{itemize}
\item where the package is being hosted (local, CRAN, bioconductor, GitHub, other)
\item if the package contains sources in another language that have been compiled or not (yes, no)
\end{itemize}

\vfill

In order to be able to install packages that require compilation (and thus have access to more or newer version of packages), you need to install:

\begin{itemize}
\item Rtools if you use Windows (\url{https://cran.r-project.org/bin/windows/Rtools/})
\item Xcode if you use macOS (\url{https://developer.apple.com/xcode/})
\item nothing if you use Linux or other Unix-based system
\end{itemize}

\end{frame}


\begin{frame}[fragile]{Installing the package for this course}
The package is not on CRAN as I want to be able to update it instantaneously and have potentially large files.

I host the package here: \url{https://github.com/courtiol/BeginR}

You should install it as follows:
<<install BeginR, eval = FALSE>>=
install.packages("drat")
drat::addRepo("courtiol")
install.packages("BeginR")
@
\end{frame}


\begin{frame}[fragile]{Loading a package}
Loading a package makes the exported function of the package and its data (if lazy-loaded) available to the user.

Example:

<<library BeginR>>=
library(BeginR)
@
\end{frame}


\subsection{Housekeeping}


\begin{frame}[fragile]{Updating \R \ packages}
Some things to know:
\begin{itemize}
\item \r \ packages evovle quickly
\item young \r \ packages can be very buggy
\item packages are not reviewed
\end{itemize}
\vfill
Good practice:
\begin{itemize}
\item update your \r \ packages daily
\end{itemize}
<<update, eval = FALSE>>=
update.packages(ask = FALSE)
@
\begin{itemize}
\item check what is being changed if you heavily rely on a recent package
\item contact the maintainer when you spot bugs (but write minimal reproductive examples!)
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Updating \R}
Some things to know:
\begin{itemize}
\item \r \ has many bugs (like all other software)
\item \r \ bugs are reported, discussed and solved in the open (unlike most other software): \url{https://bugs.r-project.org/bugzilla3/}
\item each new version of \r \ is in general more efficient, richer, and less buggy
\end{itemize}

\vfill

What to do?
\begin{itemize}
\item check for \r \ new versions on CRAN
\item check for what has changed if you fancy (\url{https://cran.r-project.org/index.html})
\item install the new version of \r \ (unless it is not a minor update that you don't need)
\item re-install all your packages
\end{itemize}

\vfill
Note 1: some packages can help to do this: \verb+InstallR+ on Windows and \verb+UpdateR+ on macOS

Note 2: also update Rstudio for full compatibility with \r.
\end{frame}

\subsection{Learning \r \ on your own}

\begin{frame}{Useful resources}
\begin{itemize}
\item the help files and official documentation (boring but thorough \url{https://cran.r-project.org/manuals.html})
\item a nice blog: \url{http://www.r-bloggers.com/}
\item 2 \r \ local meetup groups: \url{https://www.meetup.com/Berlin-R-Users-Group/} \& \url{https://www.meetup.com/rladies-berlin/}
\end{itemize}
\vfill
Books:
\begin{center}
\includegraphics[height=3cm]{../figures/bookBecksi}
\includegraphics[height=3cm]{../figures/Chambers_book1}
\includegraphics[height=3cm]{../figures/book}
\includegraphics[height=3cm]{../figures/Rbook2}
\includegraphics[height=3cm]{../figures/Rbook}
\end{center}
\end{frame}


\begin{comment}

\begin{frame}{Why is R the right choice for you?}
\justifying
{\Large \bf R} is a {\bf free open source} programming language and software environment for statistical computing \& graphics.
\vfill
R includes {\bf long-established parametric and non-parametric tests}, forefront methods in regression, classification \& clustering, and much more.
\vfill
\begin{itemize}
\item {\bf numerous functions are included} within the core installation of R
\item {\bf \Sexpr{nrow(available.packages(contriburl="http://cran.rstudio.com/src/contrib"))} packages are available on \url{cran.r-project.org}}
\item {\bf $\sim$ 1500 packages} aimed at bioinformatic on \url{bioconductor.org}
\end{itemize}
\vfill
The user can run workflows stored in one or several script file(s), which allows for {\bf reproducible research \& easy communication}.
\end{frame}

\begin{frame}[containsverbatim]{Installing a package to check proxy settings in R-Studio}
<<eval=FALSE>>=
install.packages("coin") # dialog box may be behind!
@
If it does not work follow one of the following options and try again!
\begin{itemize}
\item option 1:
<<>>=
options(repos = c(CRAN = "http://cran.r-project.org"))
@
\item option 2: (for MAC users)
<<>>=
Sys.setenv(http_proxy = "http://192.168.2.2:3128")
@
\item option 3:
<<>>=
paste(R.home(), "etc", "Renviron.site", sep = "/") # or "\" for windows
@
edit this file by adding:

\url{http_proxy=http://192.168.2.2:3128/}

\url{https_proxy=http://192.168.2.2:3128/}
\end{itemize}
\end{frame}

\section{Basics}
\begin{frame}{Getting started with R}
  \setcounter{tocdepth}{1}
  \tableofcontents[currentsection]
\end{frame}

\begin{frame}[containsverbatim]{Functions}
<<eval=T>>=
mean(x = c(1, 5, 3, 4))
vector.of.numbers <- c(1, 5, 3, 4)
mean(x = vector.of.numbers)
mean(vector.of.numbers)
mean(y = vector.of.numbers)
@
\end{frame}

\begin{frame}[containsverbatim]{Challenge \#1}
<<>>=
new.vector <- c(vector.of.numbers, 6, NA, 2)
new.vector
@
\vfill
\begin{large}
\begin{center}
Try to compute the mean of  \texttt{new.vector} using \texttt{mean()}!
\end{center}
\end{large}
\end{frame}

\begin{frame}[containsverbatim]{Key principles of the R language}
\begin{itemize}
\item Everything that exists in R is an object
\item Everything that happens in R is a function call
\end{itemize}

\begin{flushright}
John M. Chambers
\end{flushright}

\vspace{1em}
This is true even for things that do not look like it at first glance:
<<>>=
class(`+`)  # same for `?`...
`+`(1, 1)
@
\end{frame}

\section{Organising data}
\begin{frame}{Getting started with R}
  \setcounter{tocdepth}{1}
  \tableofcontents[currentsection]
\end{frame}

\begin{frame}[containsverbatim]{Vectors}
Vectors allow the organisation of entities (e.g. numbers, characters\dots) along one dimension which can be indexed!
\vfill
<<>>=
height.girls <- c(178, 175, 159, 164, 183, 192)
height.boys  <- c(181, 189, 174, 177)
@

<<>>=
height.girls[2]
height.boys[3]
@
\end{frame}

\begin{frame}[containsverbatim]{Vectors}
Vectors can be combined:
\vspace{1em}

<<>>=
height <- c(height.girls, height.boys)
height
@
\end{frame}

\begin{frame}[containsverbatim]{Vectors}
They can be indexed logically (i.e. indexed by anything leading to a vector of booleans):
\vfill
<<>>=
height > 179
@
<<>>=
height[height > 179]
height[!(height == min(height))]
height[height != min(height)]
@
\end{frame}

\begin{frame}[containsverbatim]{Vectors}
They work with other things than numbers:
<<tidy=F>>=
sex <- c("girl","girl","girl","girl","girl", "girl",
         "boy","boy","boy","boy")
sex <- factor(sex)
sex
@

<<>>=
# Or
sex <- factor(c(rep("girl", times = 6),
                rep("boy",  times = 4)))
# Or
sex <- factor(c(rep("girl", times = length(height.girls)),
                rep("boy",  times = length(height.boys))))
@
\end{frame}

\begin{frame}[containsverbatim]{Vectors}
Many functions can take a vector as an input:
\begin{columns}
\column[t]{0.5\linewidth}
<<>>=
unique(sex)
length(sex)
table(sex)
@
\column[t]{0.5\linewidth}
<<>>=
min(height)
max(height)  # try range()
mean(height)  # try median()
var(height) # try sd()
@
\end{columns}
<<>>=
summary(height)
@
\end{frame}

\begin{frame}[containsverbatim]{Data frames}
Data frames allow the organisation of entities as a matrix-like structure whose columns have the same length:
\vspace{1em}
<<>>=
dataframe.ht <- data.frame(Height = height, Sex = sex)
head(dataframe.ht)
@
\end{frame}

\begin{frame}[containsverbatim]{Data frames}
It is good practice to always check their structure:
\vspace{1em}
<<>>=
str(dataframe.ht)
@
\end{frame}

\begin{frame}[containsverbatim]{Data frames}
You access the columns by means of the extractor \texttt{\$}
\vspace{1em}
<<>>=
height
rm(list = c("height", "sex")) # removing original vectors
height
dataframe.ht$Height #Or: with(data = dataframe.ht, Height)
@
\vfill
\begin{center}
\textcolor{purple}{$\Rightarrow$ What is the average height?}
\end{center}
\end{frame}

\begin{frame}[containsverbatim]{Data frames}
Some functions can take a data frame as an input:
\vfill
<<>>=
summary(dataframe.ht)
@
\vfill
Note: this will be the case of a lot of functions performing statistical tests!
\end{frame}

\begin{frame}[containsverbatim]{Data frames}
How to compute the average height per sex?
\vfill
\begin{itemize}
\item simple
<<>>=
mean(dataframe.ht$Height[dataframe.ht$Sex == "boy"])
@
\item more elegant
<<>>=
tapply(X = dataframe.ht$Height, INDEX = dataframe.ht$Sex,
       FUN = mean)
# Or: with(data = dataframe.ht, tapply(X = Height,
#   INDEX = Sex, FUN = mean))
@
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim]{Data frames}
They can also be indexed:
\vspace{1em}
<<>>=
dataframe.ht[1, ]
dataframe.ht[, 1]  # Or: dataframe.ht[, "Sex"]
@
\end{frame}

\begin{frame}[containsverbatim]{Data frames}
They can be edited:
\vspace{1em}
<<>>=
dataframe.ht[1, 1]
dataframe.ht[1, 1] <- 171.3
dataframe.ht[1, 1]
dataframe.ht$linenumber <- 1:nrow(dataframe.ht)  # add column
ncol(dataframe.ht) # try dim()
dataframe.ht$linenumber <- NULL  # remove column
ncol(dataframe.ht)
@
\end{frame}

\begin{frame}[containsverbatim]{Lists}
Lists allow the organisation of any set of entities into a single R object:
\vspace{1em}
<<>>=
list.ht <- list(girls = height.girls, boys = height.boys)
list.ht
@
\end{frame}

\begin{frame}[containsverbatim]{Lists}
Lists can also be indexed and their elements extracted:
\vspace{1em}
<<>>=
list.ht$girls
list.ht["boys"]  # still a list
list.ht[["boys"]]  # vector
list.ht[[2]][3]
@
\end{frame}

\begin{frame}[containsverbatim]{Lists}
Some functions can take a list as an input:
\vspace{1em}
<<>>=
lapply(list.ht, FUN = mean)
@
\end{frame}

\begin{frame}[containsverbatim]{Summary}
\begin{columns}
\column[t]{0.3\linewidth}
<<>>=
dataframe.ht
@
\column[t]{0.3\linewidth}
<<>>=
list.ht
@
\end{columns}
\end{frame}

\begin{frame}[containsverbatim]{Summary}
  \begin{itemize}
  \item \texttt{data.frame}
  \vfill
  \begin{itemize}
    \item All columns have same length
    \item Each column can have its own class (e.g. \texttt{numeric}, \texttt{factor}, \texttt{character})
  \end{itemize}
  \vfill
  \item \texttt{list}
  \vfill
  \begin{itemize}
    \item Each element can have its own length
    \item Each element can have its own class (e.g. \texttt{numeric}, \texttt{factor}, \texttt{character})
  \end{itemize}
  \vfill
  \end{itemize}
\end{frame}

% \begin{frame}[containsverbatim]{Summary}
% \begin{columns}
% \column[t]{0.5\linewidth}
% <<>>=
% class(dataframe.ht)
% class(list.ht)
% @
% \column[t]{0.5\linewidth}
% <<>>=
% # vectors:
% class(height.girls)
% class(list.ht$girls)
% class(dataframe.ht$Sex)
% @
% \end{columns}
% \end{frame}

\section{Importing/exporting data}
\begin{frame}{Getting started with R}
  \setcounter{tocdepth}{1}
  \tableofcontents[currentsection]
\end{frame}

\begin{frame}[containsverbatim]{Working directory}
<<>>=
getwd()  # to change, use setwd()
dir() # listing all files in the working directory
dir(pattern = "*.csv")
@
\end{frame}

\begin{frame}[containsverbatim]{Exporting and importing data in R}
<<tidy=F>>=
write.csv(dataframe.ht,
    file = "my.first.R.dataframe.csv", row.names = FALSE)

rm(list = ls())  # deleting everything in R

dataframe.ht <- read.csv("my.first.R.dataframe.csv")
@
\begin{center}
\begin{minipage}{0.8\linewidth}
\begin{block}{}
\begin{center}
R cannot read/write \*.xls files out of the box\\
Packages can do that but it is safer to use \*.csv files\\
Excel can read and write \*.csv files!\\
\end{center}
\end{block}
\end{minipage}
\end{center}
\vfill
\end{frame}

\begin{frame}{Challenge \#2}
\begin{large}
\begin{center}
Create a dataframe using your favorite spreadsheet software\\ and import it in R!
\end{center}
\end{large}
\end{frame}

\section{Plotting}
\begin{frame}{Getting started with R}
  \setcounter{tocdepth}{1}
  \tableofcontents[currentsection]
\end{frame}

\begin{frame}[containsverbatim]{Foreplay}
First, let's create a new column \texttt{Age} in our set \texttt{dataframe.ht}:
\vfill
<<tidy=F>>=
dataframe.ht$Age <- c(28, 25, 33, 34, 28, 36, 31, 28, 27, 27)
head(dataframe.ht)
@
\begin{center}
\end{center}
\end{frame}

\begin{frame}[containsverbatim]{Scatter plot}
<<fig1_plot, fig.width=4, fig.height=4,include=F>>=
color.sex <- ifelse(test = dataframe.ht$Sex == "girl", yes = "pink", no = "blue")
plot(Height ~ Age, data = dataframe.ht, col = color.sex)
@
<<tidy=F, eval=F>>=
color.sex <- ifelse(test = dataframe.ht$Sex == "girl",
                    yes = "pink", no = "blue")

plot(Height ~ Age, data = dataframe.ht, col = color.sex)
@
\vspace{-1.5cm}
\begin{center}
\includegraphics[width=0.55\linewidth]{./figure/fig1_plot-1.pdf}
\end{center}
\end{frame}

\begin{frame}[containsverbatim]{Scatter plot}
<<eval=F, tidy=F>>=
?plot.default
?par # to set graphical parameters
@
<<echo=FALSE>>=
options(width = 50)
@
<<fig2_plot, fig.width=4, fig.height=4,include=F>>=
plot(Height ~ Age, data = dataframe.ht, col=color.sex,
    pch=3, xlab="Age", ylab="Height [cm]",
    cex=3, cex.lab=1.2, cex.axis=0.5,
    las=2, col.axis="blue")
@
<<tidy=F, eval=F>>=
plot(Height ~ Age, data = dataframe.ht, col = color.sex,
    pch = 3, xlab = "Age", ylab = "Height [cm]",
    cex = 3, cex.lab = 1.2, cex.axis = 0.5,
    las = 2, col.axis = "blue")
@
\vspace{-0.8cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/fig2_plot-1.pdf}
\end{center}
\end{frame}


\begin{frame}[containsverbatim]{Decorating plots}
Drawing lines (h = horizontal, v = vertical, or ``intercept, slope''):
<<tidy=F, eval=F>>=
?abline
?text
@
<<fig3_plot, fig.width=4, fig.height=4,include=F>>=
plot(Height ~ Age, data = dataframe.ht, col=color.sex)
abline(v=30, lty="dashed", col="red")
abline(h=175, lty="dotted")
@
<<tidy=F, eval=F>>=
plot(Height ~ Age, data = dataframe.ht, col=color.sex)
abline(v = 30, lty = "dashed", col = "red") #lty = line type
abline(h = 175, lty = "dotted")
@
\vspace{-0.8cm}
\begin{center}
\includegraphics[width=0.45\linewidth]{./figure/fig3_plot-1.pdf}
\end{center}
\end{frame}


% Steph 4
\begin{frame}[containsverbatim]{Decorating plots}
Drawing arrows and adding text:
<<eval=F, tidy=F>>=
?arrows
?text
@
<<fig4_plot, fig.width=4, fig.height=4,include=F>>=
plot(Height ~ Age, data = dataframe.ht, col = color.sex,
     pch=16, cex=3, ylim=c(150, 200))
max.value <- max(x=dataframe.ht$Height)
where.max <- dataframe.ht$Age[which.max(x=dataframe.ht$Height)]
arrows(x0=where.max, y0=max.value - 18,
       x1=where.max,  y1 = max.value, col="black", lwd=3) #lwd=line width
text(x=where.max, y=max.value - 20, labels="Max")
options(width=100)
@
<<tidy=F, eval=F, size="scriptsize">>=
plot(Height ~ Age, data = dataframe.ht, col = color.sex,
     pch = 16, cex = 3, ylim = c(150, 200))
max.value <- max(x = dataframe.ht$Height)
where.max <- dataframe.ht$Age[which.max(x = dataframe.ht$Height)]
arrows(x0 = where.max, y0 = max.value - 18,
       x1 = where.max,  y1 = max.value, col = "black", lwd = 3) #lwd = line width
text(x = where.max, y = max.value - 20, labels = "Max")
@
\vspace{-0.9cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/fig4_plot-1.pdf}
\end{center}
\end{frame}

% Steph 5a
\begin{frame}[containsverbatim]{Box plots and histograms}
<<fig5_plot, fig.width=8, fig.height=4,include=F>>=
par(mfrow = c(1, 2))
boxplot(Height ~ Sex, data = dataframe.ht)
hist(dataframe.ht$Height)
@
<<tidy=F, eval=F>>=
par(mfrow = c(1, 2))
boxplot(Height ~ Sex, data = dataframe.ht)
hist(dataframe.ht$Height)
@
\begin{center}
\includegraphics[width=0.75\linewidth]{./figure/fig5_plot-1.pdf}
\end{center}
\end{frame}


% Steph 6
\begin{frame}[containsverbatim]{Histograms}
<<eval=F, tidy=F>>=
?hist
@
<<tidy=F, eval=F, size="scriptsize">>=
par(mfrow = c(1, 4))
hist(dataframe.ht$Height, breaks = max)
hist(dataframe.ht$Height, breaks = 3)
hist(dataframe.ht$Height, breaks = 5)
hist(dataframe.ht$Height, breaks = seq(from = 150, to = 200, by = 10),
     freq = FALSE, col = "lightgrey")
@

<<fig6_plot, fig.width=12, fig.height=4, include=F>>=
par(mfrow = c(1, 4))
hist(dataframe.ht$Height, breaks = max)
hist(dataframe.ht$Height, breaks = 3)
hist(dataframe.ht$Height, breaks = 5)
hist(dataframe.ht$Height, breaks = seq(from = 150, to = 200, by = 10),
     freq = FALSE, col = "lightgrey")
@
\begin{center}
\includegraphics[width=0.9\linewidth]{./figure/fig6_plot-1.pdf} % AC THIS LOOKS SHITTY
\end{center}
\end{frame}

% Steph 6a
\begin{frame}[containsverbatim]{Histograms}
<<echo=F>>=
options(width=80)
@
<<tidy=F, fig.keep='none', size="scriptsize">>=
my.h <- hist(dataframe.ht$Height)
my.h
@
\end{frame}


% Steph 7
\begin{frame}[containsverbatim]{Bar charts}
<<tidy=F, size="scriptsize", fig.keep='none'>>=
mybp <- table(dataframe.ht$Height)
mybp
par(mfrow = c(1, 1), las = 2)
barplot(mybp)
@
<<fig7_plot, fig.width=4, fig.height=4,include=F>>=
par(mfrow = c(1, 1), las = 2)
barplot(mybp)
@
\vspace{-0.8cm}
\begin{center}
\includegraphics[width=0.4\linewidth]{./figure/fig7_plot-1.pdf} %AC - AGAIN, FIGURE TO Large
\end{center}
\end{frame}

%Steph 9
\begin{frame}[containsverbatim]{Margins and multiple figures}
Dividing the graphics device: \texttt{mfrow} = multiframe rowwise, \texttt{mar} = margins (dashed \textcolor{blue}{blue}), \texttt{oma} = outer margins (\textcolor{green}{green})
<<fig9_plot, fig.width=8, fig.height=4,include=F>>=
par(mfrow = c(1, 2), mar = c(4, 4, 1, 1),
    oma = c(1.5, 2, 1, 1))
plot(dataframe.ht$Height, col = color.sex, pch = 16, cex = 3)
boxplot(Height ~ Sex, data = dataframe.ht)
#box('plot', col='red')
box('figure', col = 'blue', lty = "dashed")
box('outer', col = 'green', lwd = 5)
@
<<tidy=F, eval=F>>=
par(mfrow = c(1, 2), mar = c(4, 4, 1, 1),
    oma = c(1.5, 2, 1, 1))
plot(dataframe.ht$Height, col = color.sex, pch = 16, cex = 3)
boxplot(Height ~ Sex, data = dataframe.ht)
@
\begin{center}
\includegraphics[width=0.7\linewidth]{./figure/fig9_plot-1.pdf}
\end{center}
\end{frame}

\begin{frame}[containsverbatim]{Exporting figures}
<<tidy=F, eval=F>>=
?pdf ?postscript
?bmp ?jpeg ?png ?tiff
@
<<tidy=F, eval=T>>=
pdf(file = "my_plot.pdf", width = 14, height = 7)
par(mfrow = c(1, 2), mar = c(4, 4, 1, 1),
    oma = c(1.5, 2, 1, 1))
plot(dataframe.ht$Height, col = color.sex, pch = 16, cex = 3)
boxplot(Height ~ Sex, data = dataframe.ht)
dev.off() # close the pdf
getwd() # to check where the file is
@
\end{frame}


%Steph 10
\begin{frame}[containsverbatim]{R code for graphs and examples}
1. Check graph example codes in the help function, e.g.
<<tidy=F, eval=F>>=
example(hist)
@
2. Scroll the web

(e.g. \url{http://www.r-graph-gallery.com/all-graphs/})
\vfill
\begin{center}
\includegraphics[width=\linewidth]{../figures/graph.png}
\end{center}
\end{frame}

\begin{frame}{Some of my home-made R graphics}
\begin{center}
  \includegraphics[width=0.3\linewidth, keepaspectratio]{../figures/plot5}
  \hspace{0.1cm}
  \includegraphics[width=0.3\linewidth, keepaspectratio]{../figures/plot9}
  \hspace{0.1cm}
  \includegraphics[width=0.3\linewidth, keepaspectratio]{../figures/plot8}
\end{center}
\end{frame}


\section{Programming}
\begin{frame}{Getting started with R}
  \setcounter{tocdepth}{1}
  \tableofcontents[currentsection]
\end{frame}

\begin{frame}[containsverbatim]{Usual programming commands exist in R}
<<>>=
for (i in 1:4) {
  print(x = i)
  if (i == 2) print(x = "found 2!")
}
@
<<tidy=F, eval=F>>=
?"for"
@
\end{frame}

\begin{frame}[containsverbatim]{You can write your own functions!}
<<>>=
OddRatio <- function(a, b) {
  odd.a <- a/(1 - a)
  odd.b <- b/(1 - b)
  return(odd.a/odd.b)
}
@

<<>>=
OddRatio(0.1, 0.01)
@
\end{frame}

\begin{frame}[containsverbatim]{How to get the code behind a function?}
Usually, by simply typing its name (without brackets). But that is not always sufficient\dots
<<size="scriptsize">>==
lm
@
\end{frame}

\begin{frame}[containsverbatim]{How to get the code behind a function?}
R methods (S3):
\vspace{1em}
<<size="scriptsize">>==
residuals
@

\texttt{residuals()} is a \emph{generic} function which rely on class specific methods:
\vspace{1em}

<<size="scriptsize">>==
methods(residuals)
@
The methods with a \texttt{*} are not exported from their package namespace.
\end{frame}

\begin{frame}[containsverbatim]{How to get the code behind a function?}
Getting the code for exported R methods (S3):
\vspace{1em}
<<size="scriptsize">>==
residuals.lm
@
\end{frame}

\begin{frame}[containsverbatim]{How to get the code behind a function?}
Getting the code for non-exported R methods (S3):
\vspace{1em}
<<size="scriptsize">>=
residuals.nls
@

<<size="scriptsize">>=
getAnywhere("residuals.nls") # or getS3method("residuals", "nls")
@
\end{frame}

\begin{frame}[containsverbatim]{Challenge \#3}
\begin{large}
\begin{center}
What is the code behind \textit{t.test()}?
\end{center}
\end{large}
\end{frame}

\begin{frame}[containsverbatim]{How to get the code behind a function?}
Some functions -- the interfaces -- call functions that are written in other languages. The source code of these latter functions is not directly visible (spotted as \texttt{.C()}, \texttt{.Fortran()}, \texttt{.Call()}, \texttt{.Primitive()}, \texttt{.Internal()}, \texttt{.External()}).
\vspace{1em}
<<size="scriptsize">>=
dnorm
@
\vspace{1em}
In these cases, the easiest is to use the read-only mirror for R (\url{https://github.com/wch/r-source}) or the relevant package on Github!
(here, the answer lies in r-source/src/nmath/dnorm.c)
\end{frame}

\begin{frame}[containsverbatim]{Numerical issues common to most programming languages}
<<size="scriptsize">>=
print(seq(0, 1, 0.1), digits = 22)
@
\vfill
<<>>=
x <- 0.7 - 0.4 - 0.3
print(x, digits = 22)
x == 0
@
\vfill
NB: same kind of thing can happen in Excel too (\url{https://support.microsoft.com/en-us/kb/214118})
\end{frame}

\begin{frame}[containsverbatim]{Numerical issues common to most programming languages}
<<eval=T>>=
??"equality"
@
\begin{scriptsize}
\begin{verbatim}
Help files with alias or concept or title matching ‚Äòequality‚Äô using
fuzzy matching:


FactoMineR::prefpls     Scatter plot and additional variables with
                        quality of representation contour lines
base::all.equal         Test if Two Objects are (Nearly) Equal
base::identical         Test Objects for Exact Equality
datasets::airquality    New York Air Quality Measurements
\end{verbatim}
\end{scriptsize}
<<>>=
?all.equal
all.equal(target = 0, current = x)
@
\end{frame}

% \begin{frame}[containsverbatim]{R is a programming language\dots with usual limits}
% J.M Muller's Serie: $u_0=2$; $u_1=-4$; $u_{n+1} = 111 - \frac{1130}{u_n} + \frac{3000}{u_n*u_{n-1}}$
% <<size="scriptsize">>=
% u <- c(2, -4)
% new.u <- function(u) 111 -1130/u[length(u)] + 3000/(u[length(u)]*u[length(u)-1])
% for(i in 1:40) u <- c(u, new.u(u))
% @
% <<figMuller, fig.width=6, fig.height=6, include=F>>=
% par(las=1)
% plot(u, type="b", ylim=c(-10,110))
% abline(h=6, col=2, lty=2, lwd=2)
% legend("topleft", bty="n", lwd=2, col=2, lty=2, legend=c("Exact limit"))
% @
% \begin{center}
% \includegraphics[height=0.7\textheight]{./figure/figMuller-1.pdf}
% \end{center}
% \end{frame}


\section{Learning about R}
\begin{frame}{Getting started with R}
  \setcounter{tocdepth}{1}
  \tableofcontents[currentsection]
\end{frame}

\begin{frame}{How to learn R on your own?}
R:
\begin{itemize}
\item
<<tidy=F, eval=F>>=
RSiteSearch("keyword(s)")
@
\end{itemize}
Internet:
\begin{itemize}
\item \url{http://www.r-project.org/}  (Manuals in many languages for free)
\item \url{http://www.r-bloggers.com/} (Blog!)
\end{itemize}
Books:
\begin{center}
\includegraphics[height=3cm]{../figures/bookBecksi}
\includegraphics[height=3cm]{../figures/Rbook2}
\includegraphics[height=3cm]{../figures/book}
\includegraphics[height=3cm]{../figures/Rbook}
\end{center}
\end{frame}

\end{comment}

\end{document}
