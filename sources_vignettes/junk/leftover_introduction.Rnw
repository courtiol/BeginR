\documentclass[xcolor=dvipsnames, aspectratio=1610, 9pt]{beamer}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc} % so that dollar sign does not turn into pound when italic!!
\usepackage{amsmath,amssymb,lmodern} % nice T1 compatible fonts
\usepackage[UKenglish]{babel}
\usepackage{verbatim}%for comment environment
\usepackage{pdfpages} %for importing specific pages from pdf
\usepackage{ragged2e}%pour justifier le text, après il suffit de tapper \justifying avant le paragraphe
\usepackage{subcaption}%for captions below figures
\usepackage{eurosym}%for euro sign
\setbeamertemplate{navigation symbols}{}%no nav symbols
\usetheme[secheader]{Madrid}%

\def\R{{\Large \bf R}}
\def\S{{\Large \bf S}}
\def\r{{\bf R}}
\def\s{{\bf S}}

\title{Getting started with \r}
\author[Alexandre Courtiol]{Alexandre Courtiol}
\institute[IZW]{Leibniz Institute of Zoo and Wildlife Research}%
\titlegraphic{
\vspace{0cm}
\hspace{1cm}
\includegraphics[height=2cm]{../figures/izw_logo}
\hspace{0.7cm}
\includegraphics[height=3cm]{../figures/physalia}
\hspace{1.3cm}
\includegraphics[height=2cm]{../figures/FU}
\hspace{1cm}
}
\date[June 2018]{\small June 2019}%

\begin{document}
\setlength{\topsep}{1pt}%space between input and output
<<knitr options, echo = FALSE, message = FALSE>>=
options(width = 60)
library(knitr)
opts_chunk$set("size" = "scriptsize", "error" = TRUE)
@

\AtBeginSection[]{
     \begin{frame}
     \frametitle{Getting started with \R}
     \setcounter{tocdepth}{1}
     \tableofcontents[currentsection]
     \end{frame}
}

\AtBeginSubsection[]{
     \begin{frame}
     \frametitle{Getting started with \R}
     \setcounter{tocdepth}{2}
     \tableofcontents[currentsubsection]
     \end{frame}
}

\begin{frame}{RStudio}
\begin{center}
\includegraphics[width=0.9\linewidth]{../figures/RStudio.png}
\end{center}
\end{frame}

\subsection{arithmetic}


\begin{frame}[fragile]{Basic arithmetic}
Try in the following in the ``Console'' pannel:
<<arithmetic>>=
1 + 1
1 - 1
2 * pi
3 / 2
10 %% 3
5^2
5^2 + 1
5^(2 + 1)
@
\vfill
Conclusion: you may never need a hand calculator anymore!
\end{frame}


\subsection{script}


\begin{frame}[t, fragile]{The concept of an \R \ script}
All instructions must be written as a computer script!
\begin{itemize}
\item it is just a text file (no need for \r \ to read it, it never gets corrupted)
\item the script must be saved at a known location
\item all non-\r \ instruction must be preceeded by the character \textbf{\#} (called number sign, hash, or pound sign)
\end{itemize}
\vfill
\pause
<<>>=
###############################
## this is my first R script ##
###############################

### simple arithmetic
1 + 1 ## compute 1 + 1
#1 + 2 ## commented lines of code won't run!

## Note: I personally use ## (or more) for explanation and # for preventing code to run because if you uncomment using the menu or shortcut,
## then explanation do not risk to be run (it would trigger errors).
@

\vfill
\pause
Why bother writing a script?
\begin{itemize}
\item transparent \& reproducible
\item easy to share \& modify
\end{itemize}
\end{frame}


\begin{frame}{Good practice}
\begin{enumerate}
\item only use the ``Console'' pannel to mess around
\item write a script and comment it thoroughly
\item make sure your script always work by re-running the whole script often
\item name objects with useful names
\end{enumerate}
\end{frame}


\subsection{objects}


\begin{frame}[fragile]{Creating objects}
Objects are being assigned using the ``arrow'' operator:
<<one plus one>>=
one.plus.one <- 1 + 1 ## storing the result
@
\pause
\vfill

Objects are being used through their name (that is the whole point):

<<display one plus one>>=
one.plus.one ## displaying the result
one.plus.one.plus.one <- one.plus.one + 1
one.plus.one.plus.one
@
\pause
\vfill

Tip:
<<one times two>>=
(one.times.two <- 1 * 2) ## storing and displaying the result at once
@
\vfill
\pause
Note 1: avoid spaces \& weird characters in object names to avoid troubles (but ``\texttt{\_}'' and ``\texttt{.}'' are OK).

Note 2: names are case sensitive.
\end{frame}


\begin{frame}[t, fragile]{Common mistakes}
The huge majority of beginner's problems are typos:
\vfill
<<mistakes, tidy=F>>=
one.plus.one
@
\vfill
<<>>=
one.plus.One
@
\vfill
\pause
<<>>=
one.plusone
@
\vfill
\pause
<<>>=
1 +
one.plus.one <- 1 + 1
@
\end{frame}


\begin{frame}{The concept of an \R \ object}
What is an object?
\begin{itemize}
\item everything in \r \ is an object
\item objects have names
\item objects allow abstraction
\item objects belongs to classes for which specific methods exist (and can be created)
\end{itemize}
\vfill
Note: we will come back on that later (for the programming session).
\end{frame}


\begin{frame}[fragile]{Note for geeks who know other computer languages}
\r \ objects are (by default) not mutable (there is copy on demand):
<<not mutable>>=
a <- 1
b <- a
b <- b + 1
b
a ## although 'b' derives from 'a' changing 'b' has no impact on 'a' (because 'a' and 'b' share different physical memory addresses)
@
\vfill
Note: if you don't know other computer languages, it just behaves as you would expect while most other programming languages don't.
\end{frame}


\subsection{functions}


\begin{frame}[fragile]{Functions}
<<citation, eval=FALSE>>=
citation()  ## function showing how to cite R
@
<<citation run, eval=TRUE, echo=FALSE, size="tiny">>=
citation()
@
\vfill
\pause
<<help citation, eval=FALSE, tidy=FALSE>>=
help(citation) ## getting help for this function
@
\vfill
<<eval = FALSE>>=
?citation() ## same but shorter (syntactic sugar)
@
\vfill
\pause
Note: always look at the help before using a function new to you!
\end{frame}


\begin{frame}[fragile]{Functions}
<<mean, eval=F, echo=T>>=
mean()
@
<<help mean, eval=F, tidy=F>>=
?mean()
@
\begin{scriptsize}
\begin{verbatim}
Usage:
     mean(x, ...)
     ## Default S3 method:
     mean(x, trim = 0, na.rm = FALSE, ...)

Arguments:
       x: An R object.  Currently there are methods for numeric/logical
          vectors and date, date-time and time interval objects, and
          for data frames all of whose columns have a method.  Complex
          vectors are allowed for ‘trim = 0’, only.
    trim: the fraction (0 to 0.5) of observations to be trimmed from
          each end of ‘x’ before the mean is computed.  Values of trim
          outside that range are taken as the nearest endpoint.
   na.rm: a logical value indicating whether ‘NA’ values should be
          stripped before the computation proceeds.
[...]
\end{verbatim}
\end{scriptsize}
\end{frame}


\begin{frame}[fragile]{Syntax for functions}
Basic syntax:
<<example function>>=
sign(x = -5)
sign(-5) ## dangerous: try to avoid!
sign(y = -5)
@
\vfill
\pause
Note: equal signs and arrows are only equivalent in the so-called ``global environment'':
<<equal vs arrows>>=
y = 2
y
y <- 3
y
@
\vfill
\pause
But not inside functions:
<<>>=
sign(y <- -5) ## dangerous: avoid!
y
sign(x = y <- -5) ## same as above
@
\vfill
\pause
So better to stick to arrows for creating objects and to equal signs for defining arguments!
\end{frame}


\begin{frame}[fragile]{Syntax for functions}
Calling a function without its parentheses reveals its definition:
<<function def>>=
sign
@

\vfill
\pause
All functions need parentheses to work and exceptions correspond to short-cuts (called ``syntactic sugar''):
<<syntactic sugar>>=
1 + 1
`+`(1, 1)
a <- 1
a
`<-`(a, 1)
a
@
\end{frame}


\begin{frame}{Key principles of the \R \ language}
\begin{itemize}
\item Everything that exists in \r \ is an object
\item Everything that happens in \r \ is a function call
\end{itemize}

\begin{flushright}
John M. Chambers
\end{flushright}
\end{frame}


\begin{frame}[fragile]{Finding functions}
To find the name of the function you are look for, you may try:
<<finding function, eval = FALSE>>=
??"linear model"
@

or

<<finding function 2, eval = FALSE>>=
help.search(pattern = "linear model", package = "stats")  ## if you know where to look for
@
\end{frame}


\subsection{packages}


\begin{frame}[fragile]{The concept of an \R \ package}

Packages extend \r \ functionalities:
\begin{itemize}
\item for most users; e.g. \verb+ggplot2+
\item for specific users; e.g. \verb+IsoriX+
\item for developers; eg. \verb+Rcpp+
\end{itemize}

\vfill
\pause
Key facts about packages:
\begin{itemize}
\item a package is just a folder (often compressed) containing \r \ functions, data \& documentation
\item a library is the installed version of the package (also a folder)
\item there are tons of packages out there:
\begin{itemize}
\item \Sexpr{nrow(available.packages(contriburl="http://cran.rstudio.com/src/contrib"))} packages are available on \url{cran.r-project.org}
\item $\sim$ 1500 packages aimed at bioinformatics on \url{bioconductor.org}
\item many more on \url{github.com}
\item many more shared between users in other ways
\end{itemize}
\end{itemize}

\vfill
\pause
Note: packages can be used to create research compendia!
\end{frame}


\begin{frame}[fragile]{Creating your own package is actually quite easy once you know \R}
\begin{center}
\includegraphics[height = 0.9\textheight]{../figures/Wickham_RPackages}
\end{center}
\end{frame}


\begin{frame}[fragile]{Installing a package}

Simple situation: the package is available as a binary file prepared for your system on CRAN
<<install package, eval=FALSE>>=
install.packages("dpylr")  ## install dplyr
@

\vfill
\pause
In general, the installation procedure depends on:
\begin{itemize}
\item where the package is being hosted (local, CRAN, bioconductor, GitHub, other)
\item if the package contains sources in another language that have been compiled or not
\end{itemize}

\vfill
\pause
In order to be able to install packages that require compilation (and thus have access to more or newer version of packages), you need to install:

\begin{itemize}
\item Rtools if you use Windows (\url{https://cran.r-project.org/bin/windows/Rtools/})
\item Xcode if you use macOS (\url{https://developer.apple.com/xcode/})
\item nothing if you use Linux or other Unix-based system
\end{itemize}

\end{frame}


\begin{frame}[fragile]{Installing the package for this course}
The package is not on CRAN as I want to be able to update it instantaneously and have potentially large files.

\vspace{1em}
I host the package here: \url{https://github.com/courtiol/BeginR}
\vfill
You should install it using \texttt{drat} as follows:
<<install BeginR, eval = FALSE>>=
install.packages("drat")    ## install drat from CRAN; only run once per R lifetime
library(drat)               ## load the package drat
addRepo("courtiol")         ## use drat to declare my GitHub account
install.packages("BeginR")  ## install the package
@
\vfill
\pause
Note: every morning of the course you may have to rerun the last 3 lines of code to get the lastest version of this course.
\end{frame}


\begin{frame}[fragile]{Loading a package}
Loading a package makes new functions and data available to the user:

\vspace{1em}
Example:

<<library BeginR>>=
library(BeginR)
@
\vfill
\pause
You can check the (exported) content of a package:
<<eval = FALSE>>=
library(help = "BeginR")
@
\end{frame}


\subsection{housekeeping}


\begin{frame}[fragile]{Updating \R \ packages}
Some things to know:
\begin{itemize}
\item \r \ packages evovle quickly
\item young \r \ packages can be very buggy
\item packages are not reviewed\\ (CRAN tests that they can install and that the examples run without generating error or warning messages)
\end{itemize}
\vfill
\pause
Good practice:
\begin{itemize}
\item update your \r \ packages frequently (I do it daily)
\end{itemize}
<<update, eval = FALSE>>=
update.packages(ask = FALSE)  ## or use RStudio menus
@
\begin{itemize}
\item check what is being changed if you heavily rely on a recent package\\ (see file called \texttt{NEWS} easily shown if you use RStudio to update)
\item contact the maintainer when you spot bugs\\ (but write minimal reproductive examples otherwise they will most likely not being able to help you)
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Updating \R \ itself}
Some things to know:
\begin{itemize}
\item \r \ has many bugs (like all other software)
\item \r \ bugs are reported, discussed and solved in the open (unlike most other software): \url{https://bugs.r-project.org/bugzilla3/}
\item each new version of \r \ is more efficient and less buggy
\end{itemize}

\vfill
\pause
What to do?
\begin{itemize}
\item check for \r \ new versions on CRAN
\item check for what has changed if you fancy (\url{http://cran.r-project.org/doc/manuals/r-release/NEWS.html})
\item install the new version of \r \ (unless it is not a minor update that you don't need)
\item re-install all your packages
\end{itemize}

\vfill
\pause
Note 1: some packages can help to do this: \verb+InstallR+ on Windows and \verb+UpdateR+ on macOS.\\
\vspace{1em}
Note 2: also update RStudio for full compatibility with \r.
\end{frame}

\subsection{learning \r \ on your own}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[t]{Useful resources}
Official documentation:
\begin{itemize}
\item the help files: every single (exported) function has a help file associated with it!
\item official manuals (boring and difficult but thorough: \url{https://cran.r-project.org/manuals.html})
\end{itemize}
\vfill
\pause
Books (roughly sorted by amount of conceptual content):
\begin{center}
\begin{figure}
\begin{subfigure}[b]{2.4cm}
\centering
\includegraphics[height=3.5cm]{../figures/Rcookbook}
\caption*{$\sim 30$ \euro}
\end{subfigure}
\begin{subfigure}[b]{2.4cm}
\centering
\includegraphics[height=3.5cm]{../figures/bookBecksi}
\caption*{$\sim 30$ \euro}
\end{subfigure}
\begin{subfigure}[b]{2.4cm}
\centering
\includegraphics[height=3.5cm]{../figures/Rbook2}
\caption*{$\sim 35$ \euro}
\end{subfigure}
\begin{subfigure}[b]{2.4cm}
\centering
\includegraphics[height=3.5cm]{../figures/Dalgaard_book}
\caption*{$\sim 40$ \euro}
\end{subfigure}
\begin{subfigure}[b]{2.4cm}
\centering
\includegraphics[height=3.5cm]{../figures/Rbook}
\caption*{$\sim 60$ \euro}
\end{subfigure}
\begin{subfigure}[b]{2.4cm}
\centering
\includegraphics[height=3.5cm]{../figures/Chambers_book1}
\caption*{$\sim 90$ \euro}
\end{subfigure}
\end{figure}
\end{center}
\vfill
\pause
Journals:
\begin{itemize}
\item Journal of Statistical Software (\url{https://www.jstatsoft.org/index})
\item The \r \ Journal (\url{https://journal.r-project.org})
\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Useful resources}
RStudio cheatsheets (\url{https://www.rstudio.com/resources/cheatsheets/}):
\begin{center}
\includegraphics[width=0.5\linewidth]{../figures/base-r.pdf}
\end{center}
\vfill
Note: there are many cheatsheets covering many aspects of \r \ and several packages developed by RStudio!
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[t]{Useful resources}
Blogs:
\begin{itemize}
\item \url{http://www.r-bloggers.com}
\item \url{https://rweekly.org}
\item \url{http://blog.revolutionanalytics.com}
\end{itemize}
\vfill
\pause
Forum:
\begin{itemize}
\item \url{https://stackoverflow.com/questions/tagged/r}
\item \url{https://stats.stackexchange.com/questions/tagged/r}
\end{itemize}
\vfill
\pause
Mailing lists:
\begin{itemize}
\item \url{https://www.r-project.org/mail.html}
\end{itemize}
\vfill
\pause
Twitter:
\begin{itemize}
\item \#rstats
\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[t]{Useful resources}
Meetup groups:
\begin{itemize}
\item \url{https://www.meetup.com/Berlin-R-Users-Group/}
\item \url{https://www.meetup.com/rladies-berlin/}
\end{itemize}
\vfill
\pause
Courses \& Workshop:
\begin{itemize}
\item Physalia (\url{https://www.physalia-courses.org})
\item DataCamp (online: \url{https://www.datacamp.com/courses/tech:r})
\end{itemize}
\vfill
\pause
Conferences:
\begin{itemize}
\item useR (\url{https://user2018.r-project.org})
\item European R User meetings (\url{https://erum.io})
\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{The best person who can teach you \R\ is YOU!}
\begin{center}
\huge{\huge{After having learned some basics, just open the console and test your understanding by performing experiments!}}
\vfill
\huge{\huge{Do not copy and paste stuff from internet without trying to understand!!!}}
\end{center}
\end{frame}

\end{document}
